{"version":3,"sources":["Components/common/AddNewTaskForm/addNewTaskForm.module.scss","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/taskSubitem.module.scss","Components/ProjectPage/ProjectTasks/TaskItem/taskItem.module.scss","Components/AddNewProjectPage/AddNewProjForm/addNewProjForm.module.scss","Components/AllProjPage/AllProjFilter/allProjFilter.module.scss","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/subTaskItem.module.scss","Components/Header/Burger/burger.module.scss","Components/MainPage/Cards/Card/ProjectList/projectList.module.scss","Components/AllProjPage/allProjPage.module.scss","Components/AllProjPage/AllProjTable/allProjTable.module.scss","Components/Header/Menu/Projects/projects.module.scss","Components/MainPage/Cards/Card/card.module.scss","Components/ProjectPage/projectPage.module.scss","Components/Header/Home/home.module.scss","Components/Header/Menu/menu.module.scss","Components/Header/Menu/Projects/ProjectItem/projectItem.module.scss","Components/ProjectPage/AddTaskForm/addTaskForm.module.scss","Components/Header/header.module.scss","Components/MainPage/MainPageHeader/mainPageHeader.module.scss","Components/MainPage/Cards/cards.module.scss","Components/ProjectPage/ProjectTasks/projectTasks.module.scss","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.module.scss","Components/AddNewProjectPage/addNewProjectPage.module.scss","Components/MainPage/mainPage.module.scss","reportWebVitals.ts","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.tsx","heplers/constructLinkFromProjectName.ts","heplers/isUniqueProjectName.ts","Redux/projectsReducer.ts","Redux/selectors/projectsSelectors.ts","Components/AddNewProjectPage/AddNewProjForm/AddNewProjForm.tsx","Components/AddNewProjectPage/AddNewProjectPage.tsx","Components/Header/Burger/Burger.tsx","Components/Header/Home/Home.tsx","Components/Header/Menu/Projects/ProjectItem/ProjectItem.tsx","Components/Header/Menu/Projects/Projects.tsx","Components/Header/Menu/Menu.tsx","Components/Header/Header.tsx","Components/MainPage/MainPageHeader/MainPageHeader.tsx","Components/MainPage/Cards/Card/Card.tsx","heplers/getProcentCompletedProj.ts","heplers/getSubTasksFromTasks.ts","heplers/last10Items.ts","Redux/selectors/tasksSelector.ts","Components/MainPage/Cards/Card/ProjectList/ProjectList.tsx","assets/icons/plus-for-card.svg","Components/MainPage/Cards/Cards.tsx","Components/MainPage/MainPage.tsx","heplers/changeCompletedTaskStatus.ts","heplers/removeSubtaskNum.ts","heplers/removeTaskAndAllSubtasks.ts","Redux/tasksReducer.ts","Components/common/AddNewTaskForm/AddNewTaskForm.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/SubTaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/TaskSubitem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItemContainer.tsx","Components/ProjectPage/ProjectTasks/ProjectTasks.tsx","Components/ProjectPage/AddTaskForm/AddTaskForm.tsx","Components/ProjectPage/ProjectPage.tsx","Components/AllProjPage/AllProjFilter/AllProjFilter.tsx","Components/AllProjPage/AllProjTable/AllProjItem/AllProjItem.tsx","Components/AllProjPage/AllProjTable/AllProjTable.tsx","Components/AllProjPage/AllProjPage.tsx","App.tsx","LocalStorage/LocalStorage.ts","Redux/reduxStore.ts","AppContainer.tsx","AppRouter.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddNewProjHeader","className","s","header","constructLinkFromProjectName","name","arr","split","forEach","el","toLowerCase","length","join","isUniqueProjectName","allProhects","projectName","isUnique","project","ADD_NEW_PROJECT","DELETE_PROJECT","CHANGE_FILTER_OPTION","SET_PROJECTS_FROM_LS","initialValue","projects","filterOption","projectsActions","core","desc","type","id","projectsReducer","state","action","newProj","Date","now","completed","link","filter","projectsSelector","filterOptionSelector","AddNewProjForm","history","useHistory","dispatch","useDispatch","useSelector","initialValues","title","validate","values","errors","onSubmit","setSubmitting","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","push","isSubmitting","touched","form","item","htmlFor","autoComplete","input","errInp","err","component","textarea","btn","disabled","AddNewProjectPage","container","Burger","openMenu","setOpenMenu","burger","viewBox","svg","open","onClick","d","topBar","middleBar","bottomBar","transform","Home","home","to","img","withRouter","activeLink","location","pathname","match","active","Projects","activeMode","useState","showList","setShowList","useEffect","projectsItems","map","list","Menu","menu","show","addNewProj","Header","wide","MainPageHeader","info","Card","children","addProject","card","body","showAllLink","getProcentCompletedProj","allTaskObj","projectId","completedProcent","taskLevelResult","taskCompletedPoin","taskNotCompletedPoint","tasksLength","tasks","oneCompletedTaskProcent","task","forProject","subtasksId","items","subtasks","subtask","indexOf","ids","procentForOneItem","subTasks","subTasksId","procent","taskLevel","subtaskLevelResult","subtaskCompletedProcent","subtaskNotCompletedPoint","subTask","subsubtasksId","subsubtasks","subsubtask","subTaskLevel","subsubtaskCompletedProcent","element","subSubTaksLevel","Math","ceil","getSubTasksFromTasks","tasksArr","subtaskArr","result","getAllSubtasksId","last10Items","resultArr","i","reverse","tasksSelector","tasksReducer","subtasksSelector","subsubtasksSelector","ProjectList","allMode","projectList","projectItems","targetTasks","targetSubtasks","targetSubSubtasks","status","style","width","line","noProj","Cards","src","plus","alt","MainPage","changeCompletedTaskStatus","removeSubtaskNum","subtaskId","subsubtaskId","removeTaskAndAllSubtasks","removeId","filteredTasks","allSubSubId","newSubSubTasks","newSubtasks","newTasks","DELETE_TASK","CHANGE_COMPLETED_STATUS","SET_COMPLETED_STATUS","ADD_NEW_TASK","CHANGE_TASK_ORDER","SET_TASKS_FROM_LS","tasksActions","level","idTask","order","tasksWithoutRemovedElements","text","orders","currentOrder","max","AddNewTaskForm","addSubtask","changeCreateSubtasksMode","setShowSubtasks","document","querySelector","focus","errorMess","add","close","TaskItem","showSubtasks","subtasksGenerate","isCompleted","createSubtasksMode","dragStartHandler","dragEndHandler","dragOverHandler","dropHandler","onDragStart","e","onDragLeave","onDragEnd","onDragOver","onDrop","without","innerTrigger","target","textDecoration","options","done","noDone","addSubtaskbtn","delete","subForm","SubTaskItem","subInnerTrigger","subtaskItem","optionsBar","TaskSubitem","showTask","setShowTask","subtasksElems","every","completedSubtask","subitem","trigger","withoutArr","big","TaskItemContainer","dragStartOrder","setDragStartOrder","dragStartId","setDragStartId","subtasksFind","opacity","classList","contains","remove","childsArr","querySelectorAll","child","preventDefault","ProjectTasks","findedTasks","noTasks","taskElem","sort","a","b","AddTaskForm","openForm","setOpenForm","newTask","s2","togglerInner","toggler","ProjectPage","projectLink","substr","noPage","targetProject","AllProjFilter","onChange","value","optionItem","defaultChecked","optionLabel","AllProjItem","green","AllProjTable","projectToTable","targetProjects","table","AllProjPage","linkArea","App","links","path","exact","newestOnTop","rtl","pauseOnFocusLoss","projectsLS","tasksLS","subtasksLS","subsubtasksLS","LocalStorage","set","data","stringifyData","JSON","stringify","localStorage","setItem","get","getItem","parse","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","AppContainer","getState","AppRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3c908f90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewTaskForm_form__2WPZw\",\"err\":\"addNewTaskForm_err__yU6Zi\",\"input\":\"addNewTaskForm_input__3eIMi\",\"errorMess\":\"addNewTaskForm_errorMess__3svv2\",\"btn\":\"addNewTaskForm_btn__2lwC3\",\"add\":\"addNewTaskForm_add__3QvFf\",\"close\":\"addNewTaskForm_close__11Rtf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subitem\":\"taskSubitem_subitem__1jpUb\",\"show\":\"taskSubitem_show__1arDF\",\"trigger\":\"taskSubitem_trigger__1w0OI\",\"innerTrigger\":\"taskSubitem_innerTrigger___TjcQ\",\"optionsBar\":\"taskSubitem_optionsBar__Gio7N\",\"big\":\"taskSubitem_big__8U43O\",\"withoutArr\":\"taskSubitem_withoutArr__2aIF2\",\"dragOver\":\"taskSubitem_dragOver__3N0Vv\",\"addSubtaskbtn\":\"taskSubitem_addSubtaskbtn__3hIue\",\"delete\":\"taskSubitem_delete__283Mb\",\"completed\":\"taskSubitem_completed__22yWU\",\"done\":\"taskSubitem_done__3u69j\",\"noDone\":\"taskSubitem_noDone__3x1Ht\",\"body\":\"taskSubitem_body__3bSfo\",\"subForm\":\"taskSubitem_subForm__3czdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"target\":\"taskItem_target__1QEyL\",\"dragOver\":\"taskItem_dragOver__3oF1z\",\"options\":\"taskItem_options__2oEDi\",\"item\":\"taskItem_item__Wk9ta\",\"show\":\"taskItem_show__3YJnq\",\"without\":\"taskItem_without__tkT4I\",\"innerTrigger\":\"taskItem_innerTrigger__29XN7\",\"delete\":\"taskItem_delete__Bn0oz\",\"addSubtaskbtn\":\"taskItem_addSubtaskbtn__2hbc3\",\"body\":\"taskItem_body__3mjgW\",\"completed\":\"taskItem_completed__3THK4\",\"done\":\"taskItem_done__3Sf12\",\"noDone\":\"taskItem_noDone__3na2l\",\"subForm\":\"taskItem_subForm__2Iy-N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewProjForm_form__32gg_\",\"item\":\"addNewProjForm_item__3MtXf\",\"input\":\"addNewProjForm_input__3oQc7\",\"errInp\":\"addNewProjForm_errInp__2mAeB\",\"textarea\":\"addNewProjForm_textarea__2VvE_\",\"btn\":\"addNewProjForm_btn__RCQBd\",\"err\":\"addNewProjForm_err__15Y5v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"allProjFilter_item__3KdIG\",\"input\":\"allProjFilter_input__2GQYr\",\"optionLabel\":\"allProjFilter_optionLabel__1SqUg\",\"optionItem\":\"allProjFilter_optionItem__RB0T7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subInnerTrigger\":\"subTaskItem_subInnerTrigger__rn87i\",\"subtaskItem\":\"subTaskItem_subtaskItem__ZfFKC\",\"optionsBar\":\"subTaskItem_optionsBar__11EMb\",\"delete\":\"subTaskItem_delete__19RAx\",\"completed\":\"subTaskItem_completed__2RQvM\",\"done\":\"subTaskItem_done__3_TyM\",\"noDone\":\"subTaskItem_noDone__sFQ4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"burger\":\"burger_burger__2dEQL\",\"svg\":\"burger_svg__JyvD_\",\"topBar\":\"burger_topBar__2BzG7\",\"bottomBar\":\"burger_bottomBar__1Ewhj\",\"middleBar\":\"burger_middleBar__pY8mZ\",\"open\":\"burger_open__GVyHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"projectList_list__1BFcq\",\"noProj\":\"projectList_noProj__1HJ49\",\"progress\":\"projectList_progress__3MV1D\",\"line\":\"projectList_line__3WFi9\",\"status\":\"projectList_status__y2D8X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"allProjPage_container__1jG1x\",\"header\":\"allProjPage_header__3365b\",\"noProj\":\"allProjPage_noProj__3mGNK\",\"linkArea\":\"allProjPage_linkArea__22DNd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"allProjTable_table__3FNg5\",\"btn\":\"allProjTable_btn__f5cxb\",\"green\":\"allProjTable_green__2-xpC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"projects_container__213JJ\",\"active\":\"projects_active__12Ib7\",\"list\":\"projects_list__3lsDt\",\"header\":\"projects_header__YtokM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__YhGbG\",\"header\":\"card_header__rTGYB\",\"body\":\"card_body__3alCc\",\"showAllLink\":\"card_showAllLink__c4v1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noPage\":\"projectPage_noPage__3M38S\",\"container\":\"projectPage_container__2RHP8\",\"header\":\"projectPage_header__1OpaC\",\"desc\":\"projectPage_desc__cEEOj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__25vnJ\",\"img\":\"home_img__1RaUi\",\"link\":\"home_link__2N8Xe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__3BgWF\",\"show\":\"menu_show__214xx\",\"addNewProj\":\"menu_addNewProj__pl4Ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"projectItem_link__Xu_YE\",\"active\":\"projectItem_active__2_zX0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addTaskForm_container__1bZ-G\",\"togglerInner\":\"addTaskForm_togglerInner__kKJ2P\",\"toggler\":\"addTaskForm_toggler__3Utt9\",\"form\":\"addTaskForm_form__30WoF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__rx5oG\",\"wide\":\"header_wide__2V_BF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"mainPageHeader_header__rWt6F\",\"info\":\"mainPageHeader_info__3HuZM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__39Wnu\",\"img\":\"cards_img__3qslc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noTasks\":\"projectTasks_noTasks__UUBP5\",\"container\":\"projectTasks_container__2xU9I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AddNewProjHeader_header__1YBgW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addNewProjectPage_container__3iO_g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"mainPage_container__3cCT5\"};","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import s from './AddNewProjHeader.module.scss'\r\n\r\n\r\nconst AddNewProjHeader = () => {\r\n    return (\r\n        <div className={s.header}>\r\n            <h2>Добавить новый проект</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjHeader","const constructLinkFromProjectName = (name: string) => {\r\n    let result = ''\r\n    const arr = name.split(' ')\r\n    arr.forEach(el => el.toLowerCase())\r\n    \r\n    if(arr.length > 1){\r\n        result = arr.join('-')\r\n    }else{\r\n        result = arr.join('')\r\n    }\r\n    return result\r\n}\r\n\r\nexport default constructLinkFromProjectName","import { ProjectType } from './../Redux/projectsReducer'\r\n\r\nconst isUniqueProjectName = (allProhects: Array<ProjectType>, projectName: string) => {\r\n    let isUnique = true\r\n    allProhects.forEach(project => {\r\n        if(project.name === projectName){\r\n            isUnique = false\r\n        }\r\n    })\r\n    return isUnique\r\n}\r\n\r\nexport default isUniqueProjectName","import constructLinkFromProjectName from \"../heplers/constructLinkFromProjectName\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nexport const ADD_NEW_PROJECT = 'ADD_NEW_PROJECT'\r\nexport const DELETE_PROJECT = 'DELETE_PROJECT'\r\nexport const CHANGE_FILTER_OPTION = 'CHANGE_FILTER_OPTION'\r\nexport const SET_PROJECTS_FROM_LS = 'SET_PROJECTS_FROM_LS'\r\n\r\nexport type ProjectType = {\r\n    id: number\r\n    core: string\r\n    name: string\r\n    completed: boolean\r\n    desc: string\r\n    link: string\r\n}\r\n\r\nconst initialValue = {\r\n    projects: [] as Array<ProjectType>,\r\n    filterOption: 'all'\r\n}\r\n\r\nexport const projectsActions = {\r\n    addNewProject: (name: string, core: string, desc: string) => ({ type: ADD_NEW_PROJECT, name, core, desc }),\r\n    deleteProject: (id: number) => ({ type: DELETE_PROJECT, id }),\r\n    changeFilterOption : (filterOption: string) => ({ type: CHANGE_FILTER_OPTION, filterOption }),\r\n    setProjectsFromLS: (projects: Array<ProjectType>) => ({ type: SET_PROJECTS_FROM_LS, projects })\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof projectsActions>\r\n\r\nconst projectsReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case ADD_NEW_PROJECT: {\r\n            const newProj = {\r\n                id: Date.now(), \r\n                core: action.core, \r\n                name: action.name, \r\n                completed: false, \r\n                desc: action.desc, \r\n                link: `${constructLinkFromProjectName(action.core)}-${constructLinkFromProjectName(action.name)}`\r\n            }\r\n            return {\r\n                ...state,\r\n                projects: [...state.projects, newProj ]\r\n            }\r\n        }\r\n        case DELETE_PROJECT: {\r\n            return {\r\n                ...state,\r\n                projects: state.projects.filter(project => project.id !== action.id)\r\n            }\r\n        }\r\n        case CHANGE_FILTER_OPTION: {\r\n            return {\r\n                ...state,\r\n                filterOption: action.filterOption\r\n            }\r\n        }\r\n        case SET_PROJECTS_FROM_LS: {\r\n            return {\r\n                ...state,\r\n                projects: action.projects\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default projectsReducer","import { AppStateType } from './../reduxStore'\r\n\r\nexport const projectsSelector = (state: AppStateType) => state.projectsReducer.projects\r\nexport const filterOptionSelector = (state: AppStateType) => state.projectsReducer.filterOption","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useHistory } from \"react-router\"\r\nimport { toast } from \"react-toastify\"\r\nimport constructLinkFromProjectName from \"../../../heplers/constructLinkFromProjectName\"\r\nimport isUniqueProjectName from \"../../../heplers/isUniqueProjectName\"\r\nimport { projectsActions } from \"../../../Redux/projectsReducer\"\r\nimport { projectsSelector } from \"../../../Redux/selectors/projectsSelectors\"\r\nimport s from './addNewProjForm.module.scss'\r\n\r\ntype ErrorsType = {\r\n    name?: string\r\n    title?: string\r\n}\r\n\r\nconst AddNewProjForm = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const projects = useSelector(projectsSelector)\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ name: '', title: '', desc: '' }}\r\n            validate={values => {\r\n                const errors: ErrorsType = {};\r\n                if (!values.name) {\r\n                    errors.name = '* Это поле не может быть пустым';\r\n                }\r\n                if(!isUniqueProjectName(projects, values.name)){\r\n                    errors.name = '* Проект с таким именем уже существует';\r\n                }\r\n                if (!values.title) {\r\n                    errors.title = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                dispatch(projectsActions.addNewProject(values.name, values.title, values.desc))\r\n                setSubmitting(false)\r\n                toast.dark(\"Проект успешно добавлен!\", {\r\n                    position: \"top-right\",\r\n                    autoClose: 1500,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                })\r\n                history.push(`${constructLinkFromProjectName(values.title)}-${constructLinkFromProjectName(values.name)}`)                \r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={s.form} >\r\n                <div  className={s.item}>\r\n                    <label htmlFor='title' >Заголовок / Суть:</label>\r\n                    <Field type=\"text\" name=\"title\" id='title' autoComplete='off' className={`${s.input} ${errors.title && touched.title ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"title\" component=\"div\"/>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <label htmlFor='name'>Название:</label>\r\n                    <Field type=\"text\" name=\"name\" id='name' autoComplete='off' className={`${s.input} ${errors.name && touched.name ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"name\" component=\"div\"/>\r\n                </div>\r\n                <div  className={s.item}>\r\n                    <label htmlFor='desc'>Описание:</label>\r\n                    <Field name=\"desc\" autoComplete='off' id='desc' component='textarea' className={s.textarea}/>\r\n                </div>\r\n\r\n                <button className={s.btn} type=\"submit\" disabled={isSubmitting}>Сохранить и перейти в проект</button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewProjForm","import AddNewProjHeader from \"./AddNewProjHeader/AddNewProjHeader\"\r\nimport s from './addNewProjectPage.module.scss'\r\nimport AddNewProjForm from \"./AddNewProjForm/AddNewProjForm\"\r\n\r\n\r\nconst AddNewProjectPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <AddNewProjHeader/>\r\n            <AddNewProjForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjectPage","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './burger.module.scss'\r\n\r\ntype BurgerPropsType = {\r\n    openMenu: boolean,\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Burger: FC<BurgerPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={s.burger}>\r\n            <svg viewBox=\"0 0 800 600\" className={`${s.svg} ${openMenu ? s.open : ''}`} onClick={() => setOpenMenu(!openMenu)}>\r\n                <path d=\"M300,220 C300,220 520,220 540,220 C740,220 640,540 520,420 C440,340 300,200 300,200\" className={s.topBar} />\r\n                <path d=\"M300,320 L540,320\" className={s.middleBar} />\r\n                <path d=\"M300,210 C300,210 520,210 540,210 C740,210 640,530 520,410 C440,330 300,190 300,190\" className={s.bottomBar} transform=\"translate(480, 320) scale(1, -1) translate(-480, -318)\" />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Burger","import { NavLink } from 'react-router-dom'\r\nimport s from './home.module.scss'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className={s.home}>\r\n            <NavLink className={s.link} to='/'>\r\n                <div className={s.img}></div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { Dispatch, FC, SetStateAction } from \"react\"\r\nimport { NavLink, RouteComponentProps, withRouter } from \"react-router-dom\"\r\nimport s from './projectItem.module.scss'\r\n\r\ntype ProjectItemPropsType = {\r\n    name: string\r\n    link: string\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst ProjectItem: FC<ProjectItemPropsType & RouteComponentProps> = ({ name, link, setOpenMenu, location }) => {\r\n\r\n    const activeLink = location.pathname.match(link)\r\n\r\n    return (\r\n        <li>\r\n            <NavLink \r\n                onClick={() => setOpenMenu(false)}\r\n                className={(activeLink && activeLink[0]) === link ? `${s.link} ${s.active}` : `${s.link}`} \r\n                to={link}\r\n            >{name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default withRouter(ProjectItem)","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { projectsSelector } from \"../../../../Redux/selectors/projectsSelectors\"\r\nimport ProjectItem from \"./ProjectItem/ProjectItem\"\r\nimport s from './projects.module.scss'\r\n\r\ntype ProjectPropsType = {\r\n    activeMode: boolean\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Projects: FC<ProjectPropsType> = ({ activeMode, openMenu, setOpenMenu }) => {\r\n    const [ showList, setShowList ] = useState(false)\r\n    const projects = useSelector(projectsSelector)\r\n\r\n    useEffect(() => {\r\n        if(openMenu === false){\r\n            setShowList(false)\r\n        }\r\n    }, [openMenu])\r\n\r\n    const setShowListHandler = () => {\r\n        if(projectsItems.length){\r\n            setShowList(!showList)\r\n        }else{\r\n            setShowList(false)\r\n        }\r\n    }\r\n\r\n    const projectsItems = projects\r\n        .filter(project => project.completed === !activeMode )\r\n        .map(project => <ProjectItem key={project.id} setOpenMenu={setOpenMenu} name={project.name} link={project.link} />)\r\n\r\n    return (\r\n        <div className={`${s.container} ${showList ? s.active : ''}`}>\r\n            <h2 className={s.header} onClick={() => setShowList(!showList)}> {activeMode ? 'Активные проекты' : 'Завершенные проекты'} <span>({projectsItems.length})</span> </h2>\r\n            <ul className={s.list}>\r\n                { projectsItems }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './menu.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Projects from './Projects/Projects'\r\n\r\ntype MenuPropsType = {\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Menu: FC<MenuPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={`${s.menu} ${openMenu ? s.show : ''}`}>\r\n            <Projects openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={true}/>\r\n            <Projects openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={false}/>\r\n            <NavLink onClick={() => setOpenMenu(false)} className={s.addNewProj} to='/add-new-project'>Добавить новый проект</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport Burger from './Burger/Burger'\r\nimport s from './header.module.scss'\r\nimport Home from './Home/Home'\r\nimport Menu from './Menu/Menu'\r\n\r\nconst Header = () => {\r\n    const history = useHistory()\r\n    const [ openMenu, setOpenMenu ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setOpenMenu(false)\r\n    }, [history.location.pathname])\r\n\r\n    return (\r\n        <header className={`${s.header} ${openMenu ? s.wide : ''}`}>    \r\n            <Burger openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Menu openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Home/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import s from './mainPageHeader.module.scss'\r\n\r\nconst MainPageHeader = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={s.header}>Добро пожаловать в менеджер проектов!</h1>\r\n            <div className={s.info}>\r\n                <p>Данная программа поможет вам управлять своими проектами.</p> \r\n                <p>Вы сможете составлять пошаговую схему работы проекта, контролировать процесс разработки, ставить задачи, а также разбивать их на подзадачи.</p>\r\n                <p>Приятного пользования и хороших проектов!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MainPageHeader","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './card.module.scss'\r\n\r\ntype CardPropsType = {\r\n    title: string\r\n    addProject: boolean\r\n}\r\n\r\nconst Card: FC<CardPropsType> = ({ children, title, addProject }) => {\r\n    return (\r\n        <div className={s.card}>\r\n            <h2 className={s.header}>{ title }</h2>\r\n            <div className={s.body}>\r\n                { children }\r\n            </div>\r\n            { !addProject && (\r\n                <div>\r\n                    <NavLink className={s.showAllLink} to='/all-projects'>Показать все...</NavLink>\r\n                </div> \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import { SubsubtaskType } from './../Redux/tasksReducer';\r\nimport { SubtaskType, TaskType } from \"../Redux/tasksReducer\"\r\n\r\ntype allTaskObjType = {\r\n    tasks: Array<TaskType>\r\n    subtasks: Array<SubtaskType>\r\n    subsubtasks: Array<SubsubtaskType>\r\n}\r\n\r\nconst taskLevel = (allTaskObj: allTaskObjType, projectId: number ) => {\r\n    let taskCompletedPoin = 0\r\n\r\n    const taskNotCompletedPoint: Array<any> = []\r\n    const tasksLength = allTaskObj.tasks.length\r\n    const oneCompletedTaskProcent = tasksLength ? (100 / tasksLength) : 0  \r\n\r\n    allTaskObj.tasks\r\n        .filter(task => task.forProject === projectId)\r\n        .forEach(task => {\r\n            if(task.completed){\r\n                taskCompletedPoin += 1\r\n            }else{\r\n                if(task.subtasksId.length){\r\n                    const items = allTaskObj.subtasks.filter(subtask => task.subtasksId.indexOf(subtask.id) !== -1 )\r\n                    const ids: Array<number> = []\r\n                    items.forEach(item => ids.push(item.id) )\r\n\r\n                    taskNotCompletedPoint.push({ procentForOneItem: oneCompletedTaskProcent / items.length, subTasks: [ ...items ], subTasksId: ids })\r\n                }\r\n            }\r\n        })\r\n\r\n    return  {\r\n        procent: oneCompletedTaskProcent * taskCompletedPoin,\r\n        taskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subTaskLevel = (allTaskObj: allTaskObjType, taskNotCompletedPoint: Array<any>) => {\r\n    let subtaskCompletedProcent = 0\r\n    const subtaskNotCompletedPoint: Array<any> = []\r\n\r\n    taskNotCompletedPoint.forEach(subtask => {\r\n        subtask.subTasks.forEach((subTask: any) => {\r\n            if(subTask.completed){\r\n                subtaskCompletedProcent += subtask.procentForOneItem\r\n            }else{\r\n                if(subTask.subsubtasksId.length){\r\n                    const items = allTaskObj.subsubtasks.filter(subsubtask => subtask.subTasksId.indexOf(subsubtask.id) !== -1 )\r\n                    subtaskNotCompletedPoint.push({ procentForOneItem: subtask.procentForOneItem / items.length, subTasks: [ ...items ] })\r\n                }\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subtaskCompletedProcent,\r\n        subtaskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subSubTaksLevel = (subtaskNotCompletedPoint: Array<any>) => {\r\n    let subsubtaskCompletedProcent = 0\r\n\r\n    subtaskNotCompletedPoint.forEach(subsubtask => {\r\n        subsubtask.subTasks.forEach((element: any) => {\r\n            if(element.completed){\r\n                subsubtaskCompletedProcent = subsubtaskCompletedProcent + subsubtask.procentForOneItem\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subsubtaskCompletedProcent\r\n    }\r\n}\r\n\r\nconst getProcentCompletedProj = (allTaskObj:allTaskObjType, projectId: number ) => {\r\n    let completedProcent: number = 0\r\n\r\n    const taskLevelResult = taskLevel(allTaskObj, projectId)\r\n    completedProcent = completedProcent + taskLevelResult.procent\r\n\r\n    const subtaskLevelResult = subTaskLevel(allTaskObj, taskLevelResult.taskNotCompletedPoint)\r\n    completedProcent = completedProcent + subtaskLevelResult.procent\r\n\r\n    const subSubtaskLevelResult = subSubTaksLevel(subtaskLevelResult.subtaskNotCompletedPoint)\r\n    completedProcent = completedProcent + subSubtaskLevelResult.procent\r\n\r\n    return Math.ceil(completedProcent) > 100 ? 100 : Math.ceil(completedProcent)\r\n}\r\n\r\nexport default getProcentCompletedProj","const getAllSubtasksId = (tasksArr: Array<any>) => {\r\n    const result: Array<number> = []\r\n    tasksArr.forEach(task => {\r\n        if(task.subtasksId && task.subtasksId.length){\r\n            result.push(...task.subtasksId)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.length){\r\n            result.push(...task.subsubtasksId)\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nconst getSubTasksFromTasks = (tasksArr: Array<any>, subtaskArr: Array<any>) => {\r\n    const subtasksId = getAllSubtasksId(tasksArr)\r\n    const targetSubtasks = subtaskArr.filter(subtask => subtasksId.indexOf(subtask.id) !== -1)\r\n    return targetSubtasks\r\n}\r\n\r\nexport default getSubTasksFromTasks","import { ProjectType } from \"../Redux/projectsReducer\"\r\n\r\nconst last10Items = (arr: Array<ProjectType>) => {\r\n    const resultArr: Array<ProjectType> = []\r\n    for(let i = 0; i <10; i++){\r\n        if(arr[i]){\r\n            resultArr.push(arr[i])\r\n        }else break\r\n    }\r\n    return resultArr.reverse()\r\n}\r\n\r\nexport default last10Items","import { AppStateType } from './../reduxStore'\r\n\r\nexport const tasksSelector = (state: AppStateType) => state.tasksReducer.tasks\r\nexport const subtasksSelector = (state: AppStateType) => state.tasksReducer.subtasks\r\nexport const subsubtasksSelector = (state: AppStateType) => state.tasksReducer.subsubtasks","import { FC } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport getProcentCompletedProj from '../../../../../heplers/getProcentCompletedProj'\r\nimport getSubTasksFromTasks from '../../../../../heplers/getSubTasksFromTasks'\r\nimport last10Items from '../../../../../heplers/last10Items'\r\nimport { projectsSelector } from '../../../../../Redux/selectors/projectsSelectors'\r\nimport { subsubtasksSelector, subtasksSelector, tasksSelector } from '../../../../../Redux/selectors/tasksSelector'\r\nimport s from './projectList.module.scss'\r\n\r\ntype ProjectListPropsType = {\r\n    allMode: boolean\r\n}\r\n\r\nconst ProjectList: FC<ProjectListPropsType> = ({ allMode }) => {\r\n\r\n    const projects = useSelector(projectsSelector)\r\n    const tasks = useSelector(tasksSelector)\r\n    const subtasks = useSelector(subtasksSelector)\r\n    const subsubtasks = useSelector(subsubtasksSelector)\r\n\r\n    const projectList = allMode ? projects : projects.filter(project => project.completed === false)\r\n    const last10 = last10Items(projectList)\r\n    const projectItems = last10.map(project => {\r\n\r\n        const targetTasks = tasks.filter(task => task.forProject === project.id)\r\n        const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n        const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n        \r\n        const procent = getProcentCompletedProj({\r\n            tasks: targetTasks,\r\n            subtasks: targetSubtasks,\r\n            subsubtasks: targetSubSubtasks\r\n        }, project.id)\r\n\r\n        return (\r\n            <li key={project.id}>\r\n                <NavLink to={project.link}>{project.name}</NavLink>\r\n                <div className={s.progress} title='Статус по задачам'>\r\n                    <div className={s.status}>{project.completed ? '100%' : procent + '%'}</div>\r\n                    <div style={project.completed ? {width: '100%'} : {width: procent + '%'}} className={s.line}></div>\r\n                </div>\r\n            </li>\r\n        )}\r\n    )\r\n\r\n    if(!projectItems.length){\r\n        return <p className={s.noProj}>{allMode ? 'Проектов пока нет!' : 'Активных проектов пока нет!'}</p>\r\n    }\r\n\r\n    return (\r\n        <ul className={s.list}>\r\n            {projectItems}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ProjectList","export default __webpack_public_path__ + \"static/media/plus-for-card.5262e5f6.svg\";","import { NavLink } from \"react-router-dom\"\r\nimport Card from \"./Card/Card\"\r\nimport ProjectList from \"./Card/ProjectList/ProjectList\"\r\nimport s from './cards.module.scss'\r\nimport plus from '../../../assets/icons/plus-for-card.svg'\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <Card title='Добавить новый проект' addProject={true}>\r\n                <NavLink to='/add-new-project'>\r\n                    <img className={s.img} src={plus} alt='add'/>\r\n                </NavLink>\r\n            </Card>\r\n            <Card title='Последние активные проекты' addProject={false}>\r\n                <ProjectList allMode={false} />\r\n            </Card>\r\n            <Card title='Последние проекты' addProject={false}>\r\n                <ProjectList allMode={true} />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import MainPageHeader from \"./MainPageHeader/MainPageHeader\"\r\nimport s from './mainPage.module.scss'\r\nimport Cards from \"./Cards/Cards\"\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <MainPageHeader />\r\n            <Cards />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage","const changeCompletedTaskStatus = (tasks: any, id: number) => {\r\n    return [ ...tasks.map((task: any) => {\r\n        if(task.id === id){\r\n            task.completed = !task.completed\r\n        }\r\n        return task\r\n    }) ]\r\n}\r\n\r\n\r\nexport default changeCompletedTaskStatus","const removeSubtaskNum = (tasks: any, id: number) => {\r\n    return tasks.map((task: any) => {\r\n        if(task.subtasksId && task.subtasksId.indexOf(id) !== -1){\r\n            task.subtasksId = task.subtasksId.filter((subtaskId: any) => subtaskId !== id)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.indexOf(id) !== -1){\r\n            task.subsubtasksId = task.subsubtasksId.filter((subsubtaskId: any) => subsubtaskId !== id)\r\n        }\r\n        return task\r\n    })\r\n}\r\n\r\nexport default removeSubtaskNum","const removeTaskAndAllSubtasks = (tasks: Array<any>, removeId: number, subtasks: any, subsubtasks: any = null) => {\r\n    const filteredTasks = tasks.filter(task => task.id === removeId) || subtasks.filter((task: any) => task.id === removeId)\r\n    const subtasksId = filteredTasks[0].subtasksId || filteredTasks[0].subsubtasksId\r\n    const targetSubtasks = (subtasksId && subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) !== -1)) || [] \r\n    \r\n    const allSubSubId: Array<number> = []\r\n    if(targetSubtasks.length){\r\n        targetSubtasks.forEach((subtask: any) => {\r\n            if(subtask.subsubtasksId && subtask.subsubtasksId.length){\r\n                allSubSubId.push( ...subtask.subsubtasksId )\r\n            }\r\n        });\r\n    }\r\n\r\n    const newSubSubTasks = allSubSubId.length ? subsubtasks.filter((subsubtask: any) => allSubSubId.indexOf(subsubtask.id) === -1) : subsubtasks\r\n    const newSubtasks = subtasksId && subtasksId.length ? subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) === -1) : subtasks\r\n    const newTasks = tasks.filter(task => task.id !== removeId)\r\n\r\n    return {\r\n        newTasks,\r\n        newSubtasks,\r\n        newSubSubTasks\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default removeTaskAndAllSubtasks","import changeCompletedTaskStatus from \"../heplers/changeCompletedTaskStatus\"\r\nimport removeSubtaskNum from \"../heplers/removeSubtaskNum\"\r\nimport removeTaskAndAllSubtasks from \"../heplers/removeTaskAndAllSubtasks\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nexport const DELETE_TASK = 'DELETE_TASK'\r\nexport const CHANGE_COMPLETED_STATUS = 'CHANGE_COMPLETED_STATUS'\r\nexport const SET_COMPLETED_STATUS = 'SET_COMPLETED_STATUS'\r\nexport const ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nexport const CHANGE_TASK_ORDER = 'CHANGE_TASK_ORDER'\r\nexport const SET_TASKS_FROM_LS = 'SET_TASKS_FROM_LS'\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    forProject?: number\r\n    text: string\r\n    order: number\r\n    completed: boolean\r\n    subtasksId: Array<number>\r\n}\r\n\r\nexport type SubtaskType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    subsubtasksId: Array<number>\r\n}\r\n\r\nexport type SubsubtaskType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n}\r\n\r\nconst initialValue = {\r\n    tasks: [] as Array<TaskType>,\r\n    subtasks: [] as Array<SubtaskType>,\r\n    subsubtasks: []  as Array<SubsubtaskType>,\r\n}\r\n\r\nexport const tasksActions = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null = null) => ({ type: DELETE_TASK, id, level, subtasksId}),\r\n    changeCompletedStatus: (id: number, level: number) => ({ type: CHANGE_COMPLETED_STATUS, id, level }),\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => ({ type: SET_COMPLETED_STATUS, id, status, level }),\r\n    addNewTask: (task: string, level: number, idTask: number | null, projectId?: number) => ({ type: ADD_NEW_TASK, task, level, idTask, projectId }),\r\n    changeTaskOrder: (id: number, order: number) => ({ type: CHANGE_TASK_ORDER, id, order }),\r\n    setTasksFromLS: ( tasks: Array<any>, level: number ) => ({ type: SET_TASKS_FROM_LS, tasks, level })\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof tasksActions>\r\n\r\nconst tasksReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case DELETE_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.tasks, action.id, state.subtasks, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: tasksWithoutRemovedElements.newTasks,\r\n                        subtasks: tasksWithoutRemovedElements.newSubtasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubSubTasks\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.subtasks, action.id, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: removeSubtaskNum(state.tasks, action.id),\r\n                        subtasks: tasksWithoutRemovedElements.newTasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubtasks\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: removeSubtaskNum(state.subtasks, action.id),\r\n                        subsubtasks: state.subsubtasks.filter(subsubtask => subsubtask.id !== action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: changeCompletedTaskStatus(state.tasks, action.id)\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: changeCompletedTaskStatus(state.subtasks, action.id)\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: changeCompletedTaskStatus(state.subsubtasks, action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case SET_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.id){\r\n                                task.completed = action.status\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.id){\r\n                                subtask.completed = action.status\r\n                            }\r\n                            return subtask\r\n                        })\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case ADD_NEW_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.idTask){\r\n                                task.subtasksId.push(id)\r\n                            }\r\n                            return task\r\n                        }),\r\n                        subtasks: [ ...state.subtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            subsubtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.idTask){\r\n                                subtask.subsubtasksId.push(id)\r\n                            }\r\n                            return subtask\r\n                        }),\r\n                        subsubtasks: [ ...state.subsubtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            completed: false\r\n                        }]\r\n                    }\r\n                }\r\n                case -1: {\r\n                    const orders = state.tasks\r\n                        .filter(task => task.forProject === action.projectId)\r\n                        .map(task => task.order)\r\n                    const currentOrder = orders.length && orders[0] !== null ? Math.max(...orders) + 1 : 0\r\n                    return {\r\n                        ...state,\r\n                        tasks: [...state.tasks, {\r\n                            id: Date.now(),\r\n                            forProject: action.projectId,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            order: currentOrder,\r\n                            subtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_TASK_ORDER: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if(task.id === action.id){\r\n                        task.order = action.order\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        }\r\n        case SET_TASKS_FROM_LS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: action.tasks\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: action.tasks\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: action.tasks\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { Dispatch, FC, SetStateAction, useEffect } from \"react\"\r\nimport s from './addNewTaskForm.module.scss'\r\n\r\n\r\ntype AddNewTaskFormPropType = {\r\n    addSubtask: (task: string) => void\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    setShowSubtasks?: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype ErrorsType = {\r\n    task?: string\r\n}\r\n\r\nconst AddNewTaskForm: FC<AddNewTaskFormPropType> = ({ addSubtask, changeCreateSubtasksMode, setShowSubtasks }) => {\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ task: '' }}\r\n            validate={values => {\r\n                const errors: ErrorsType = {};\r\n                if (!values.task) {\r\n                    errors.task = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                if(setShowSubtasks){\r\n                    setShowSubtasks(true)\r\n                }\r\n                addSubtask(values.task)\r\n                setSubmitting(false)\r\n                changeCreateSubtasksMode(false)\r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={`${s.form} ${touched.task && errors.task ? s.err : ''}`}>\r\n                <Field type=\"text\" name=\"task\" autoComplete='off' className={s.input}/>\r\n                <ErrorMessage name=\"task\" component=\"div\" className={s.errorMess} />\r\n                <button className={`${s.btn} ${s.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                <button className={`${s.btn} ${s.close}`} onClick={() => changeCreateSubtasksMode(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewTaskForm","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { toast } from 'react-toastify'\r\nimport { tasksActions } from '../../../../Redux/tasksReducer'\r\nimport AddNewTaskForm from '../../../common/AddNewTaskForm/AddNewTaskForm'\r\nimport s from './taskItem.module.scss'\r\n\r\ntype TaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    subsubtasksId?: Array<number> \r\n    showSubtasks: boolean\r\n    subtasksGenerate: Array<JSX.Element> | any\r\n    isCompleted: boolean\r\n    createSubtasksMode: boolean    \r\n    setShowSubtasks: Dispatch<SetStateAction<boolean>>\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    dragStartHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragEndHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragOverHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dropHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n}\r\n\r\nconst TaskItem: FC<TaskItemPropsType> = ({ id, text, completed, subsubtasksId, setShowSubtasks, showSubtasks, subtasksGenerate, isCompleted, createSubtasksMode, changeCreateSubtasksMode, dragStartHandler, dragEndHandler, dragOverHandler, dropHandler }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const addSubtaskFromLevel0 = (task: string) => {\r\n        dispatch(tasksActions.addNewTask(task, 0, id))\r\n        toast.dark(\"Подзадача успешно добавлена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowSubtasks(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const removeTask = () => {\r\n        dispatch(tasksActions.deleteTask(id, 0, subsubtasksId as null | Array<number>))\r\n        toast.dark(\"Задача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        dispatch(tasksActions.changeCompletedStatus(id, 0))\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onDragStart={(e) => dragStartHandler(e)}\r\n            onDragLeave={(e) => dragEndHandler(e)}\r\n            onDragEnd={(e) => dragEndHandler(e)}\r\n            onDragOver={(e) => dragOverHandler(e)}\r\n            onDrop={(e) => dropHandler(e)}\r\n            draggable='true' \r\n            className={`${s.item} ${subsubtasksId?.length && showSubtasks ? s.show : ''} ${!subsubtasksId?.length ? s.without : ''}`}\r\n        >\r\n            <div className={s.innerTrigger}>\r\n                <div className={s.target} onClick={() => setShowSubtasks(!showSubtasks)} style={isCompleted ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n                <div className={s.options}>\r\n                    {!subsubtasksId?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button title='Добавить подзадачу' onClick={addSubtaskHandler} className={s.addSubtaskbtn}></button>\r\n                    <button title='Удалить' onClick={removeTask} className={s.delete}></button>\r\n                </div>\r\n            </div>\r\n            <div className={s.body}>\r\n                {showSubtasks && subtasksGenerate.length ? subtasksGenerate : ''}\r\n                { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel0} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowSubtasks} /></div> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem","import { FC } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { toast } from 'react-toastify'\r\nimport { tasksActions } from '../../../../../../Redux/tasksReducer'\r\nimport s from './subTaskItem.module.scss'\r\n\r\ntype SubTaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n}\r\n\r\nconst SubTaskItem: FC<SubTaskItemPropsType> = ({id,  text, completed }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeSubtaskItem = () => {\r\n        dispatch(tasksActions.deleteTask(id, 2, null))\r\n        toast.dark(\"Подподзадача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        dispatch(tasksActions.changeCompletedStatus(id, 2))\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={s.subInnerTrigger}\r\n        >\r\n            <div className={s.subtaskItem} style={completed ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n            <div className={s.optionsBar}>\r\n                <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button>\r\n                <button title='Удалить' onClick={removeSubtaskItem} className={s.delete}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskItem","import { FC, useState } from \"react\"\r\nimport s from './taskSubitem.module.scss'\r\nimport AddNewTaskForm from \"../../../../common/AddNewTaskForm/AddNewTaskForm\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { subsubtasksSelector } from \"../../../../../Redux/selectors/tasksSelector\"\r\nimport { SubsubtaskType, tasksActions } from \"../../../../../Redux/tasksReducer\"\r\nimport SubTaskItem from \"./SubTaskItem/SubTaskItem\"\r\nimport { toast } from \"react-toastify\"\r\n\r\ntype TaskSubitemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    subsubtasksId: Array<number>\r\n}\r\n\r\nconst TaskSubitem: FC<TaskSubitemPropsType> = ({ id, text, completed, subsubtasksId }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [showTask, setShowTask] = useState(false)\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const subsubtasks = useSelector(subsubtasksSelector)\r\n\r\n    const subtasksElems = subsubtasksId.map((subtaskId: number) => {\r\n        for(let i = 0; i <= subsubtasks.length; i++){\r\n            if(subsubtasks[i] && subsubtasks[i].id === subtaskId){\r\n                return subsubtasks[i]\r\n            }\r\n        }\r\n    })\r\n\r\n    const subtasksGenerate = subtasksElems.map((subsubtask?: SubsubtaskType) => subsubtask && (\r\n        <SubTaskItem \r\n            key={subsubtask.id} \r\n            id={subsubtask.id} \r\n            completed={subsubtask.completed} \r\n            text={subsubtask.text} \r\n        />)\r\n    )\r\n\r\n    const isCompleted = subtasksElems.every(subsubtasksId => subsubtasksId && subsubtasksId.completed)\r\n\r\n    const completedSubtask = !subtasksGenerate?.length ? completed : isCompleted\r\n\r\n    const removeSubitem = () => {\r\n        dispatch(tasksActions.deleteTask(id, 1, subsubtasksId))\r\n        toast.dark(\"Подзадача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const addSubtaskFromLevel1 = (task: string) => {\r\n        dispatch(tasksActions.addNewTask(task, 1, id))\r\n        toast.dark(\"Подподзадача успешно добавлена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowTask(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        dispatch(tasksActions.changeCompletedStatus(id, 1))\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={`${s.subitem} ${showTask ? s.show : ''}`}> \r\n            <div className={s.innerTrigger}>\r\n                <div className={`${s.trigger} ${!subtasksGenerate?.length ? s.withoutArr : ''}`} onClick={() => setShowTask(!showTask)} style={completedSubtask ? {textDecoration: 'line-through'} : {}} >- {text}</div>\r\n                <div className={`${s.optionsBar} ${!subtasksGenerate?.length ? s.big : ''}`}>\r\n                    {!subtasksGenerate?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button onClick={addSubtaskHandler} title='Добавить подзадачу' className={s.addSubtaskbtn}></button>\r\n                    <button onClick={removeSubitem} title='Удалить' className={s.delete}></button>\r\n                </div>\r\n            </div> \r\n            <div className={s.body}>{showTask ? subtasksGenerate : ''}</div>\r\n            { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel1} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowTask} /></div> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskSubitem","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { subtasksSelector } from \"../../../../Redux/selectors/tasksSelector\"\r\nimport { tasksActions } from \"../../../../Redux/tasksReducer\"\r\nimport TaskItem from \"./TaskItem\"\r\nimport TaskSubitem from \"./TaskSubitem/TaskSubitem\"\r\n\r\ntype TaskItemContainerPropsType = {\r\n    text: string\r\n    subtasksId?: Array<number>\r\n    completed: boolean\r\n    id: number\r\n    order: number\r\n    dragStartOrder: number\r\n    setDragStartOrder: Dispatch<SetStateAction<number>>\r\n    dragStartId: number\r\n    setDragStartId: Dispatch<SetStateAction<number>>\r\n}\r\n\r\nconst TaskItemContainer: FC<TaskItemContainerPropsType> = ({id, text, order, subtasksId, completed, dragStartOrder, setDragStartOrder, dragStartId, setDragStartId}) => {\r\n    const dispatch = useDispatch()\r\n    const subtasks = useSelector(subtasksSelector)\r\n\r\n    const [showSubtasks, setShowSubtasks] = useState(false)\r\n\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const subtasksFind = subtasksId?.length ? \r\n        subtasksId.map(subtaskId => {\r\n            for(let i = 0; i <= subtasks.length; i++){\r\n                if(subtasks[i] && subtasks[i].id === subtaskId){\r\n                    return subtasks[i]\r\n                }\r\n            }\r\n        })\r\n        : []\r\n\r\n    const subtasksGenerate = subtasksFind\r\n        .map(subtask => {\r\n        if(subtask && subtask.subsubtasksId){\r\n            return <TaskSubitem \r\n                key={subtask.id} \r\n                id={subtask.id} \r\n                text={subtask.text} \r\n                completed={subtask.completed}\r\n                subsubtasksId={subtask.subsubtasksId} \r\n            />\r\n        }\r\n    })\r\n\r\n    const isCompleted = subtasksId?.length ? subtasksFind?.every(subtask => subtask && subtask.completed) : completed\r\n\r\n    useEffect(() => {\r\n        dispatch(tasksActions.setCompletedStatus(id, isCompleted, 0))\r\n    }, [isCompleted])\r\n\r\n    // ============ drag and drop ===============\r\n\r\n    const dragStartHandler = (e: any) => {\r\n        setDragStartId(id)\r\n        setDragStartOrder(order)\r\n        e.target.style.opacity = '0.5'\r\n    }\r\n\r\n    const dragEndHandler = (e: any) => {\r\n        e.target.style.opacity = '1'\r\n        if(e.target.classList.contains('taskItem_dragOver__2O2xP')){\r\n            e.target.classList.remove('taskItem_dragOver__2O2xP')\r\n        }else{\r\n            const childsArr = document.querySelectorAll('.taskItem_dragOver__2O2xP')\r\n            if(childsArr.length){\r\n                childsArr.forEach(child => child.classList.remove('taskItem_dragOver__2O2xP'))\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragOverHandler = (e: any) => {\r\n        e.preventDefault()\r\n        if(e.target.classList.contains('taskItem_target__1AnYX')){\r\n            e.target.classList.add('taskItem_dragOver__2O2xP')\r\n        }\r\n        \r\n    }\r\n\r\n    const dropHandler = (e: any) => {\r\n        e.preventDefault()\r\n        dispatch(tasksActions.changeTaskOrder(dragStartId, order))\r\n        dispatch(tasksActions.changeTaskOrder(id, dragStartOrder))\r\n        \r\n    }\r\n\r\n    return <TaskItem\r\n        id={id}\r\n        text={text} \r\n        completed={completed} \r\n        subsubtasksId={subtasksId} \r\n        showSubtasks={showSubtasks} \r\n        setShowSubtasks={setShowSubtasks}\r\n        isCompleted={isCompleted}\r\n        subtasksGenerate={subtasksGenerate}\r\n        createSubtasksMode={createSubtasksMode}\r\n        changeCreateSubtasksMode={changeCreateSubtasksMode}\r\n        dragStartHandler={dragStartHandler}\r\n        dragEndHandler={dragEndHandler}\r\n        dragOverHandler={dragOverHandler}\r\n        dropHandler={dropHandler}\r\n    />\r\n}\r\n\r\nexport default TaskItemContainer","import { FC, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { tasksSelector } from \"../../../Redux/selectors/tasksSelector\"\r\nimport { TaskType } from \"../../../Redux/tasksReducer\"\r\nimport s from './projectTasks.module.scss'\r\nimport TaskItemContainer from \"./TaskItem/TaskItemContainer\"\r\n\r\n\r\ntype ProjectTasksPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst ProjectTasks: FC<ProjectTasksPropsType> = ({ projectId }) => {\r\n    const tasks = useSelector(tasksSelector)\r\n\r\n    const findedTasks = tasks.filter((task: TaskType) => task.forProject === projectId)\r\n\r\n    const [dragStartOrder, setDragStartOrder] = useState(0)\r\n    const [dragStartId, setDragStartId] = useState(0)\r\n\r\n    if(!findedTasks.length){\r\n        return <p className={s.noTasks}>Задач на проект пока нет!</p>\r\n    }\r\n\r\n    const sortTasks = (a: TaskType, b: TaskType) => a.order > b.order ? 1 : -1\r\n\r\n    const taskElem = findedTasks\r\n        .sort(sortTasks)\r\n        .map(task => <TaskItemContainer \r\n            key={task.id} \r\n            id={task.id} \r\n            order={task.order} \r\n            text={task.text} \r\n            subtasksId={task.subtasksId} \r\n            completed={task.completed} \r\n            dragStartOrder={dragStartOrder}\r\n            setDragStartOrder={setDragStartOrder}\r\n            dragStartId={dragStartId}\r\n            setDragStartId={setDragStartId}\r\n        />)\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            {taskElem}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectTasks","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { FC, useEffect, useState } from \"react\"\r\nimport s from './addTaskForm.module.scss'\r\nimport s2 from '../../common/AddNewTaskForm/addNewTaskForm.module.scss'\r\nimport { tasksActions } from \"../../../Redux/tasksReducer\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { toast } from \"react-toastify\"\r\n\r\ntype AddTaskFormPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype ErrorsType = {\r\n    newTask?: string\r\n}\r\n\r\nconst AddTaskForm: FC<AddTaskFormPropsType> = ({ projectId }) => {\r\n    const dispatch = useDispatch()\r\n    const [openForm, setOpenForm] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [openForm])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            \r\n            { openForm ? (\r\n                <Formik\r\n                    initialValues={{ newTask: '' }}\r\n                    validate={values => {\r\n                        const errors: ErrorsType = {};\r\n                        if (!values.newTask) {\r\n                            errors.newTask = '* Это поле не может быть пустым';\r\n                        }\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        dispatch(tasksActions.addNewTask(values.newTask, -1, null, projectId))\r\n                        toast.dark(\"Задача успешно добавлена!\", {\r\n                            position: \"top-right\",\r\n                            autoClose: 1500,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        })\r\n                        setOpenForm(false)\r\n                        setSubmitting(false)\r\n                    }}\r\n                >\r\n                {({ isSubmitting, errors, touched }) => (\r\n                    <Form className={`${s2.form} ${touched.newTask && errors.newTask ? s2.err : ''}`}>\r\n                        <Field type=\"text\" name=\"newTask\" autoComplete='off' className={s2.input}/>\r\n                        <ErrorMessage name=\"newTask\" component=\"div\" className={s2.errorMess} />\r\n                        <button className={`${s2.btn} ${s2.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                        <button className={`${s2.btn} ${s2.close}`} onClick={() => setOpenForm(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n            ) : (\r\n                <div className={s.togglerInner}>\r\n                    - <button className={s.toggler} onClick={() => setOpenForm(true)} ></button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTaskForm","import s from './projectPage.module.scss'\r\nimport ProjectTasks from \"./ProjectTasks/ProjectTasks\"\r\nimport AddTaskForm from './AddTaskForm/AddTaskForm'\r\nimport { useSelector } from 'react-redux'\r\nimport { projectsSelector } from '../../Redux/selectors/projectsSelectors'\r\nimport { useHistory } from 'react-router'\r\n\r\nconst ProjectPage = () => {\r\n    const history = useHistory()\r\n    const projects = useSelector(projectsSelector)\r\n\r\n    const projectLink = history.location.pathname.match(/.+/)\r\n    const project = projects.filter(project => {\r\n        if(projectLink){\r\n            return project.link === projectLink[0].substr(1)\r\n        }else return false\r\n    })\r\n    \r\n    if(!project.length){\r\n        return <h2 className={s.noPage}>Ошибка! Страница не найдена!</h2>\r\n    }\r\n\r\n    const targetProject = project[0]\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <h2 className={s.header}>{ `${targetProject.core} \"${targetProject.name}\"` }</h2>\r\n            { targetProject.desc && <div className={s.desc}>{targetProject.desc}</div> }\r\n            <ProjectTasks projectId={targetProject.id}/>\r\n            <AddTaskForm projectId={targetProject.id} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectPage","import { ChangeEvent, FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { projectsActions } from '../../../Redux/projectsReducer';\r\nimport { filterOptionSelector } from '../../../Redux/selectors/projectsSelectors';\r\nimport s from './allProjFilter.module.scss'\r\n\r\n\r\nconst AllProjFilter = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const filterOption = useSelector(filterOptionSelector)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(projectsActions.changeFilterOption(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'all'} type=\"radio\" name=\"filter\" value=\"all\" id=\"all\" className={s.input}/>\r\n                    <label htmlFor=\"all\" className={s.optionLabel}><span>Все</span></label>\r\n                </div> \r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'completed'} type=\"radio\" name=\"filter\" value=\"completed\" id=\"completed\" className={s.input}/>\r\n                    <label htmlFor=\"completed\" className={s.optionLabel}><span>Завершенные</span></label>\r\n                </div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'notCompleted'} type=\"radio\" name=\"filter\" value=\"notCompleted\" id=\"notCompleted\" className={s.input}/>\r\n                    <label htmlFor=\"notCompleted\" className={s.optionLabel}><span>Незавершенные</span></label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllProjFilter","import { FC } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { toast } from \"react-toastify\"\r\nimport getProcentCompletedProj from \"../../../../heplers/getProcentCompletedProj\"\r\nimport getSubTasksFromTasks from \"../../../../heplers/getSubTasksFromTasks\"\r\nimport { projectsActions } from \"../../../../Redux/projectsReducer\"\r\nimport { subsubtasksSelector, subtasksSelector, tasksSelector } from \"../../../../Redux/selectors/tasksSelector\"\r\nimport { tasksActions } from '../../../../Redux/tasksReducer'\r\nimport s from '../allProjTable.module.scss'\r\n\r\ntype AllProjItemPropsType = {\r\n    core: string\r\n    name: string\r\n    desc: string\r\n    id: number\r\n    completed: boolean\r\n    link: string\r\n}\r\n\r\nconst AllProjItem: FC<AllProjItemPropsType> = ({ core, name, desc, completed, link, id }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const tasks = useSelector(tasksSelector)\r\n    const subtasks = useSelector(subtasksSelector)\r\n    const subsubtasks = useSelector(subsubtasksSelector)\r\n\r\n    const targetTasks = tasks.filter(task => task.forProject === id)\r\n    const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n    const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n    \r\n    const procent = getProcentCompletedProj({\r\n        tasks: targetTasks,\r\n        subtasks: targetSubtasks,\r\n        subsubtasks: targetSubSubtasks\r\n    }, id)\r\n\r\n    const deleteItem = () => {\r\n        dispatch(projectsActions.deleteProject(id))\r\n        targetTasks.forEach(task => {\r\n            dispatch(tasksActions.deleteTask(task.id, 0, task.subtasksId))\r\n        })\r\n        toast.dark(\"Проект успешно удален!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{core}</td>\r\n            <td><NavLink to={`/${link}`}>{name}</NavLink></td>\r\n            <td>{desc || '-'}</td>\r\n            <td>{ completed ? '100%' : procent + '%'}</td>\r\n            <td>{ completed ? <span className={s.green}>&#10004;</span> : <span>&#10008;</span>}</td>\r\n            <td>\r\n                <button onClick={deleteItem} className={s.btn}>&#9746;</button>    \r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default AllProjItem","import { FC } from \"react\"\r\nimport { ProjectType } from \"../../../Redux/projectsReducer\"\r\nimport AllProjItem from \"./AllProjItem/AllProjItem\"\r\nimport s from './allProjTable.module.scss'\r\n\r\ntype AllProjTablePropsType = {\r\n    targetProjects: Array<ProjectType>\r\n}\r\n\r\nconst AllProjTable: FC<AllProjTablePropsType> = ({ targetProjects }) => {\r\n\r\n    const projectToTable = targetProjects\r\n        .map(project => <AllProjItem \r\n            key={project.id} \r\n            core={project.core}\r\n            name={project.name} \r\n            desc={project.desc}\r\n            completed={project.completed}\r\n            id={project.id}\r\n            link={project.link}\r\n        />)\r\n\r\n    return (\r\n        <table className={s.table}>\r\n            <thead>\r\n                <tr>\r\n                    <td>Суть</td>\r\n                    <td>Название</td>\r\n                    <td>Описание</td>\r\n                    <td>Прогресс</td>\r\n                    <td>Завершено</td>\r\n                    <td>Удалить</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { projectToTable }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default AllProjTable","import { useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { filterOptionSelector, projectsSelector } from '../../Redux/selectors/projectsSelectors'\r\nimport AllProjFilter from './AllProjFilter/AllProjFilter'\r\nimport s from './allProjPage.module.scss'\r\nimport AllProjTable from './AllProjTable/AllProjTable'\r\n\r\nconst AllProjPage = () => {\r\n\r\n    const projects = useSelector(projectsSelector)\r\n    const filterOption = useSelector(filterOptionSelector)\r\n\r\n    const targetProjects = projects.filter(project => {\r\n        if(filterOption === 'all'){\r\n            return project\r\n        }else if(filterOption === 'completed'){\r\n            return project.completed\r\n        }else{\r\n            return !project.completed\r\n        }\r\n    })\r\n\r\n    const noProj = !projects.length\r\n        ? <p className={s.noProj}>Проектов пока нет. <NavLink to='/add-new-project'>Добавьте первый.</NavLink></p> \r\n        : <p className={s.noProj}>Проектов по даному фильтру нет. Попробуйте другой.</p>\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.header}>\r\n                <h2>Все проекты</h2>\r\n            </div>\r\n            <AllProjFilter/>\r\n            { targetProjects.length ? (\r\n                <>\r\n                    <AllProjTable targetProjects={targetProjects} />\r\n                    <div className={s.linkArea}>\r\n                        <NavLink to='/add-new-project'>Добавить новый проект</NavLink>\r\n                    </div>\r\n                </>\r\n            ) : noProj }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllProjPage","import { FC } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { ToastContainer } from 'react-toastify'\nimport AddNewProjectPage from './Components/AddNewProjectPage/AddNewProjectPage'\nimport Header from './Components/Header/Header'\nimport MainPage from './Components/MainPage/MainPage'\nimport ProjectPage from './Components/ProjectPage/ProjectPage'\nimport AllProjPage from './Components/AllProjPage/AllProjPage'\nimport 'react-toastify/dist/ReactToastify.css'\n\ntype AppPropsType = {\n  links: Array<string>\n}\n\nconst App: FC<AppPropsType> = ({ links }) => {\n  return (\n    <div>\n      <Header/>\n      <Switch>\n        <Route path={links} component={ProjectPage} />\n        <Route path='/all-projects' component={AllProjPage} />\n        <Route path='/add-new-project' component={AddNewProjectPage} />\n        <Route path='/' exact component={MainPage} />\n      </Switch>\n      <ToastContainer position=\"top-right\"\n          autoClose={1500}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n    </div>\n  )\n}\n\nexport default App\n","export const projectsLS = 'projects'\r\nexport const tasksLS = 'tasks'\r\nexport const subtasksLS = 'subtasks'\r\nexport const subsubtasksLS = 'subsubtasks'\r\n\r\nconst LocalStorage = {\r\n    set(name: string, data: any){\r\n        const stringifyData = JSON.stringify(data)\r\n        localStorage.setItem(name, stringifyData)\r\n    },\r\n    get(name: string){\r\n        const data = localStorage.getItem(name)\r\n        if(data){\r\n            return JSON.parse(data)\r\n        }\r\n    }\r\n}\r\n\r\nexport default LocalStorage","import { createStore, combineReducers, compose } from 'redux'\r\nimport projectsReducer from './projectsReducer'\r\nimport tasksReducer from './tasksReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    projectsReducer,\r\n    tasksReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype ProreptiesType<T> = T extends { [key: string]: infer U} ? U : never\r\nexport type ActionTypes<T extends {[key: string] : (...args: any) => any}> = ReturnType<ProreptiesType<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers())\r\n\r\nexport default store","import React, { useEffect } from 'react'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory} from 'react-router'\r\nimport App from './App'\r\nimport LocalStorage, { projectsLS, subsubtasksLS, subtasksLS, tasksLS } from './LocalStorage/LocalStorage'\r\nimport { projectsActions, ProjectType } from './Redux/projectsReducer'\r\nimport store from './Redux/reduxStore'\r\nimport { projectsSelector } from './Redux/selectors/projectsSelectors'\r\nimport { subsubtasksSelector, subtasksSelector, tasksSelector } from './Redux/selectors/tasksSelector'\r\nimport { tasksActions } from './Redux/tasksReducer'\r\n\r\nconst AppContainer = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const projects = useSelector(projectsSelector)\r\n    const tasks = useSelector(tasksSelector)\r\n    const subtasks = useSelector(subtasksSelector)\r\n    const subsubtasks = useSelector(subsubtasksSelector)\r\n   \r\n    let links = store.getState().projectsReducer.projects &&\r\n      store.getState().projectsReducer.projects.map((project: ProjectType) => '/' + project.link)\r\n\r\n    useEffect(() => {\r\n      links = store.getState().projectsReducer.projects && \r\n        store.getState().projectsReducer.projects.map((project: ProjectType) => '/' + project.link)\r\n    }, [history.location.pathname])\r\n  \r\n    useEffect(() => {\r\n      const projects = LocalStorage.get(projectsLS)\r\n      if(projects && projects.length){\r\n        dispatch(projectsActions.setProjectsFromLS(projects))\r\n      }\r\n  \r\n      const tasks = LocalStorage.get(tasksLS)\r\n      if(tasks && tasks.length){\r\n        dispatch(tasksActions.setTasksFromLS(tasks, 0))\r\n      }\r\n  \r\n      const subtasks = LocalStorage.get(subtasksLS)\r\n      if(subtasks && subtasks.length){\r\n        dispatch(tasksActions.setTasksFromLS(subtasks, 1))\r\n      }\r\n  \r\n      const subsubtasks = LocalStorage.get(subsubtasksLS)\r\n      if(subsubtasks && subsubtasks.length){\r\n        dispatch(tasksActions.setTasksFromLS(subsubtasks, 2))\r\n      }\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(projectsLS, projects)\r\n    }, [projects])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(tasksLS, tasks)\r\n    }, [tasks])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(subtasksLS, subtasks)\r\n    }, [subtasks])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(subsubtasksLS, subsubtasks)\r\n    }, [subsubtasks])\r\n\r\n    return <App links={links} />\r\n}\r\n\r\nexport default AppContainer\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport AppContainer from './AppContainer'\r\nimport store from './Redux/reduxStore'\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\nimport AppRouter from './AppRouter'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// @ts-ignore\nreportWebVitals()\n"],"sourceRoot":""}