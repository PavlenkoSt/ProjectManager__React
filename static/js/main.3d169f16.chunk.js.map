{"version":3,"sources":["Components/common/AddNewTaskForm/addNewTaskForm.module.css","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/taskSubitem.module.css","Components/ProjectPage/ProjectTasks/TaskItem/taskItem.module.css","Components/AddNewProjectPage/AddNewProjForm/addNewProjForm.module.css","Components/AllProjPage/AllProjFilter/allProjFilter.module.css","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/subTaskItem.module.css","Components/Header/Burger/burger.module.css","Components/ProjectPage/projectPage.module.css","Components/MainPage/Cards/Card/ProjectList/projectList.module.css","Components/AllProjPage/AllProjTable/allProjTable.module.css","Components/AllProjPage/allProjPage.module.css","Components/Header/Menu/Projects/projects.module.css","Components/MainPage/Cards/Card/card.module.css","Components/Header/Home/home.module.css","Components/Header/Menu/menu.module.css","Components/Header/Menu/Projects/ProjectItem/projectItem.module.css","Components/ProjectPage/AddTaskForm/addTaskForm.module.css","Components/Header/header.module.css","Components/MainPage/MainPageHeader/mainPageHeader.module.css","Components/MainPage/Cards/cards.module.css","Components/ProjectPage/ProjectTasks/projectTasks.module.css","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.module.css","Components/AddNewProjectPage/addNewProjectPage.module.css","Components/MainPage/mainPage.module.css","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.tsx","heplers/constructLinkFromProjectName.ts","heplers/isUniqueProjectName.ts","Redux/projectsReducer.ts","Components/AddNewProjectPage/AddNewProjForm/AddNewProjForm.tsx","Components/AddNewProjectPage/AddNewProjectPage.tsx","Components/AllProjPage/AllProjFilter/AllProjFilter.tsx","heplers/getProcentCompletedProj.ts","heplers/getSubTasksFromTasks.ts","Components/AllProjPage/AllProjTable/AllProjItem/AllProjItem.tsx","Components/AllProjPage/AllProjTable/AllProjTable.tsx","Components/AllProjPage/AllProjPage.tsx","Components/AllProjPage/AllProjPageContainer.tsx","Components/Header/Burger/Burger.tsx","Components/Header/Home/Home.tsx","Components/Header/Menu/Projects/ProjectItem/ProjectItem.tsx","Components/Header/Menu/Projects/Projects.tsx","Components/Header/Menu/Projects/ProjectsContainer.tsx","Components/Header/Menu/Menu.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/MainPage/MainPageHeader/MainPageHeader.tsx","Components/MainPage/Cards/Card/Card.tsx","heplers/last10Items.ts","Components/MainPage/Cards/Card/ProjectList/ProjectList.tsx","assets/icons/plus-for-card.svg","Components/MainPage/Cards/Cards.tsx","Components/MainPage/MainPage.tsx","heplers/changeCompletedTaskStatus.ts","heplers/removeSubtaskNum.ts","heplers/removeTaskAndAllSubtasks.ts","Redux/tasksReducer.ts","Components/common/AddNewTaskForm/AddNewTaskForm.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/SubTaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/TaskSubitem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/TaskSubitemContainer.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItemContainer.tsx","Components/ProjectPage/ProjectTasks/ProjectTasks.tsx","Components/ProjectPage/AddTaskForm/AddTaskForm.tsx","Components/ProjectPage/ProjectPage.tsx","Components/ProjectPage/ProjectPageContainer.tsx","Redux/reduxStore.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","AddNewProjHeader","className","s","header","constructLinkFromProjectName","name","arr","split","forEach","el","toLowerCase","length","join","isUniqueProjectName","allProhects","projectName","isUnique","project","ADD_NEW_PROJECT","DELETE_PROJECT","CHANGE_FILTER_OPTION","initialValue","projects","id","core","completed","desc","link","filterOption","projectsActions","addNewProject","type","deleteProject","changeFilterOption","projectsReducer","state","action","newProj","Date","now","filter","mapDispatchToProps","addNewProj","connect","withRouter","history","initialValues","title","validate","values","errors","onSubmit","setSubmitting","push","isSubmitting","touched","form","item","htmlFor","autoComplete","input","errInp","err","component","textarea","btn","disabled","AddNewProjectPage","container","AllProjFilter","onChange","e","target","value","optionItem","defaultChecked","optionLabel","getProcentCompletedProj","allTaskObj","projectId","completedProcent","taskLevelResult","taskCompletedPoin","taskNotCompletedPoint","tasksLength","tasks","oneCompletedTaskProcent","task","forProject","subtasksId","items","subtasks","subtask","indexOf","ids","procentForOneItem","subTasks","subTasksId","procent","taskLevel","subtaskLevelResult","subtaskCompletedProcent","subtaskNotCompletedPoint","subTask","subsubtasksId","subsubtasks","subsubtask","subTaskLevel","subsubtaskCompletedProcent","element","subSubTaksLevel","Math","ceil","getSubTasksFromTasks","tasksArr","subtaskArr","result","getAllSubtasksId","tasksReducer","targetTasks","targetSubtasks","targetSubSubtasks","to","green","onClick","AllProjTable","targetProjects","projectToTable","map","table","AllProjPage","linkArea","noProj","Burger","openMenu","setOpenMenu","burger","viewBox","svg","open","d","topBar","middleBar","bottomBar","transform","Home","home","img","activeLink","location","pathname","match","active","Projects","activeMode","projectsItems","setShowList","showList","list","useState","useEffect","Menu","menu","show","Header","wide","MainPageHeader","info","Card","children","addProject","card","body","showAllLink","last10Items","resultArr","i","reverse","allMode","projectList","projectItems","progress","status","style","width","line","Cards","src","plus","alt","MainPage","changeCompletedTaskStatus","removeSubtaskNum","subtaskId","subsubtaskId","removeTaskAndAllSubtasks","removeId","filteredTasks","allSubSubId","newSubSubTasks","newSubtasks","newTasks","DELETE_TASK","CHANGE_COMPLETED_STATUS","SET_COMPLETED_STATUS","ADD_NEW_TASK","CHANGE_TASK_ORDER","text","order","tasksActions","deleteTask","level","changeCompletedStatus","setCompletedStatus","addNewTask","idTask","changeTaskOrder","tasksWithoutRemovedElements","subtasksOrders","max","subsubtasksOrders","orders","AddNewTaskForm","addSubtask","changeCreateSubtasksMode","setShowSubtasks","document","querySelector","focus","errorMess","add","close","TaskItem","showSubtasks","subtasksGenerate","isCompleted","createSubtasksMode","dragStartHandler","dragEndHandler","dragOverHandler","dropHandler","onDragStart","onDragLeave","onDragEnd","onDragOver","onDrop","draggable","without","innerTrigger","textDecoration","options","done","noDone","addSubtaskbtn","delete","subForm","SubTaskItem","subInnerTrigger","subtaskItem","optionsBar","TaskSubitem","showTask","addSubtaskHandler","removeSubitem","toggleCompletedStatus","addSubtaskFromLevel1","setShowTask","completedSubtask","subitem","trigger","withoutArr","big","subtasksElems","every","dragStartOrder","setDragStartOrder","dragStartId","setDragStartId","sortTasks","subtasksFind","sort","opacity","classList","contains","remove","childsArr","querySelectorAll","child","preventDefault","findedTasks","noTasks","a","b","taskElem","openForm","setOpenForm","newTask","s2","togglerInner","toggler","ProjectPage","targetProject","compose","projectLink","substr","noPage","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sageMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","AppWithRouter","links","getState","path","ProjectPageContainer","AllProjPageContainer","exact","RouterApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d169f16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewTaskForm_form__3g-zy\",\"err\":\"addNewTaskForm_err__9xUjU\",\"input\":\"addNewTaskForm_input__3EOqx\",\"errorMess\":\"addNewTaskForm_errorMess__5JaB2\",\"btn\":\"addNewTaskForm_btn__2Amg4\",\"add\":\"addNewTaskForm_add__VVqTS\",\"close\":\"addNewTaskForm_close__1gNIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subitem\":\"taskSubitem_subitem__SPimv\",\"innerTrigger\":\"taskSubitem_innerTrigger__3jl0q\",\"optionsBar\":\"taskSubitem_optionsBar__27j5g\",\"big\":\"taskSubitem_big__1JTR6\",\"trigger\":\"taskSubitem_trigger__3h9-7\",\"withoutArr\":\"taskSubitem_withoutArr__jAUTy\",\"show\":\"taskSubitem_show__2PkWH\",\"addSubtaskbtn\":\"taskSubitem_addSubtaskbtn__2PO6h\",\"delete\":\"taskSubitem_delete__3MtFg\",\"completed\":\"taskSubitem_completed__2rRVB\",\"done\":\"taskSubitem_done__2nETy\",\"noDone\":\"taskSubitem_noDone__39QYm\",\"body\":\"taskSubitem_body__1M__t\",\"subForm\":\"taskSubitem_subForm__NFS1h\",\"dragOver\":\"taskSubitem_dragOver__1gUGU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"target\":\"taskItem_target__1AnYX\",\"item\":\"taskItem_item__3B5xJ\",\"show\":\"taskItem_show__2VpZe\",\"without\":\"taskItem_without__XpkUU\",\"innerTrigger\":\"taskItem_innerTrigger__NwV3Q\",\"options\":\"taskItem_options__3qzKw\",\"delete\":\"taskItem_delete__1ytO-\",\"addSubtaskbtn\":\"taskItem_addSubtaskbtn__IgSBU\",\"body\":\"taskItem_body__3Y5U6\",\"completed\":\"taskItem_completed__2Cy07\",\"done\":\"taskItem_done__3G-gr\",\"noDone\":\"taskItem_noDone__1aShc\",\"subForm\":\"taskItem_subForm__3W7I-\",\"dragOver\":\"taskItem_dragOver__2O2xP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewProjForm_form__zOBkq\",\"item\":\"addNewProjForm_item__CyU94\",\"textarea\":\"addNewProjForm_textarea__2qe68\",\"btn\":\"addNewProjForm_btn__htI6U\",\"err\":\"addNewProjForm_err__CN_6t\",\"input\":\"addNewProjForm_input__2Curx\",\"errInp\":\"addNewProjForm_errInp__2dmyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"allProjFilter_item__gAojr\",\"input\":\"allProjFilter_input__3hXzr\",\"optionLabel\":\"allProjFilter_optionLabel__2Og5u\",\"optionItem\":\"allProjFilter_optionItem__1aVSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subInnerTrigger\":\"subTaskItem_subInnerTrigger__1GQXe\",\"subtaskItem\":\"subTaskItem_subtaskItem__2G3jS\",\"optionsBar\":\"subTaskItem_optionsBar__15CXx\",\"delete\":\"subTaskItem_delete__1x2ME\",\"completed\":\"subTaskItem_completed__3C2Pn\",\"done\":\"subTaskItem_done__2Re0k\",\"noDone\":\"subTaskItem_noDone__Hs2k4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"burger\":\"burger_burger__3_Cbw\",\"svg\":\"burger_svg__ZOHcE\",\"topBar\":\"burger_topBar__1O7Nu\",\"bottomBar\":\"burger_bottomBar__1gwea\",\"middleBar\":\"burger_middleBar__Ba4uD\",\"open\":\"burger_open__1fKmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noPage\":\"projectPage_noPage__3oCFx\",\"container\":\"projectPage_container__3fOCF\",\"header\":\"projectPage_header__WChPu\",\"desc\":\"projectPage_desc__1BgrZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"projectList_list__dlHt0\",\"noProj\":\"projectList_noProj__3U_9K\",\"progress\":\"projectList_progress__2md5f\",\"line\":\"projectList_line__1Erji\",\"status\":\"projectList_status__1in_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"allProjTable_table__37KYm\",\"btn\":\"allProjTable_btn__2CUJi\",\"green\":\"allProjTable_green__24Ji-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"allProjPage_container__16620\",\"header\":\"allProjPage_header__1RMNA\",\"noProj\":\"allProjPage_noProj__2Jy1S\",\"linkArea\":\"allProjPage_linkArea__10A5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"projects_container__1LHTC\",\"header\":\"projects_header__2Qpad\",\"list\":\"projects_list__3Q-dd\",\"active\":\"projects_active__44tND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__GR9R-\",\"header\":\"card_header__1DnW0\",\"body\":\"card_body__20zdI\",\"showAllLink\":\"card_showAllLink__27Bi0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2xhVZ\",\"link\":\"home_link__EM9jL\",\"img\":\"home_img__35Hwj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__1ltFB\",\"show\":\"menu_show__WKioA\",\"addNewProj\":\"menu_addNewProj__WXx5n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"projectItem_link__2VsY8\",\"active\":\"projectItem_active__3Mubc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addTaskForm_container__1ArrL\",\"togglerInner\":\"addTaskForm_togglerInner__1wM9O\",\"toggler\":\"addTaskForm_toggler__NsTft\",\"form\":\"addTaskForm_form__1anMV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1F3do\",\"wide\":\"header_wide__h_dWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"mainPageHeader_header__3e0m9\",\"info\":\"mainPageHeader_info__23hJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__yx2mv\",\"img\":\"cards_img__ADdFg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noTasks\":\"projectTasks_noTasks__1jjZQ\",\"container\":\"projectTasks_container__2OEzr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AddNewProjHeader_header__1H5JR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addNewProjectPage_container__100hs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"mainPage_container__3sIO1\"};","import s from './AddNewProjHeader.module.css'\r\n\r\n\r\nconst AddNewProjHeader = () => {\r\n    return (\r\n        <div className={s.header}>\r\n            <h2>Добавить новый проект</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjHeader","const constructLinkFromProjectName = (name: string) => {\r\n    let result = ''\r\n    const arr = name.split(' ')\r\n    arr.forEach(el => el.toLowerCase())\r\n    \r\n    if(arr.length > 1){\r\n        result = arr.join('-')\r\n    }else{\r\n        result = arr.join('')\r\n    }\r\n    return result\r\n}\r\n\r\nexport default constructLinkFromProjectName","import { ProjectType } from './../Redux/projectsReducer'\r\n\r\nconst isUniqueProjectName = (allProhects: Array<ProjectType>, projectName: string) => {\r\n    let isUnique = true\r\n    allProhects.forEach(project => {\r\n        if(project.name === projectName){\r\n            isUnique = false\r\n        }\r\n    })\r\n    return isUnique\r\n}\r\n\r\nexport default isUniqueProjectName","import constructLinkFromProjectName from \"../heplers/constructLinkFromProjectName\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nconst ADD_NEW_PROJECT = 'ADD_NEW_PROJECT'\r\nconst DELETE_PROJECT = 'DELETE_PROJECT'\r\nconst CHANGE_FILTER_OPTION = 'CHANGE_FILTER_OPTION'\r\n\r\nexport type ProjectType = {\r\n    id: number\r\n    core: string\r\n    name: string\r\n    completed: boolean\r\n    desc: string\r\n    link: string\r\n}\r\n\r\nconst initialValue = {\r\n    projects: [\r\n        { id: 1, core: 'Project-manager', name: 'LazyKoala', completed: false, desc: '', link: 'project-manager-lazykoala'},\r\n        { id: 2, core: 'Mobile game', name: 'Scooby-Doo', completed: true, desc: 'Super-puper-duper mobile game. This game will occupate the million people heart ariund the World!', link: 'mobile-game-scooby-doo'},\r\n        { id: 3, core: 'SRM', name: 'Friendly Killer', completed: false, desc: '', link: 'srm-friendly-killer'},\r\n        { id: 4, core: 'Course', name: 'Youtube-star', completed: true, desc: '', link: 'course-youtube-star'},\r\n        { id: 5, core: 'Online store', name: 'Black-market', completed: false, desc: '', link: 'online-store-black-market'},\r\n    ] as Array<ProjectType>,\r\n    filterOption: 'all'\r\n}\r\n\r\nexport const projectsActions = {\r\n    addNewProject: (name: string, core: string, desc: string) => ({ type: ADD_NEW_PROJECT, name, core, desc }),\r\n    deleteProject: (id: number) => ({ type: DELETE_PROJECT, id }),\r\n    changeFilterOption : (filterOption: string) => ({ type: CHANGE_FILTER_OPTION, filterOption })\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof projectsActions>\r\n\r\nconst projectsReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case ADD_NEW_PROJECT: {\r\n            const newProj = {\r\n                id: Date.now(), \r\n                core: action.core, \r\n                name: action.name, \r\n                completed: false, \r\n                desc: action.desc, \r\n                link: `${constructLinkFromProjectName(action.core)}-${constructLinkFromProjectName(action.name)}`\r\n            }\r\n            return {\r\n                ...state,\r\n                projects: [...state.projects, newProj ]\r\n            }\r\n        }\r\n        case DELETE_PROJECT: {\r\n            return {\r\n                ...state,\r\n                projects: state.projects.filter(project => project.id !== action.id)\r\n            }\r\n        }\r\n        case CHANGE_FILTER_OPTION: {\r\n            return {\r\n                ...state,\r\n                filterOption: action.filterOption\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default projectsReducer","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { RouteComponentProps, withRouter } from \"react-router\"\r\nimport constructLinkFromProjectName from \"../../../heplers/constructLinkFromProjectName\"\r\nimport isUniqueProjectName from \"../../../heplers/isUniqueProjectName\"\r\nimport { projectsActions, ProjectType } from \"../../../Redux/projectsReducer\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\nimport s from './addNewProjForm.module.css'\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewProj: (name: string, core: string, desc: string) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst AddNewProjForm: FC<MapDispatchPropsType & MapStatePropsType & RouteComponentProps> = ({ addNewProj, projects, history }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{ name: '', title: '', desc: '' }}\r\n            validate={values => {\r\n                const errors: any = {};\r\n                if (!values.name) {\r\n                    errors.name = '* Это поле не может быть пустым';\r\n                }\r\n                if(!isUniqueProjectName(projects, values.name)){\r\n                    errors.name = '* Проект с таким именем уже существует';\r\n                }\r\n                if (!values.title) {\r\n                    errors.title = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                addNewProj(values.name, values.title, values.desc)\r\n                history.push(`${constructLinkFromProjectName(values.title)}-${constructLinkFromProjectName(values.name)}`)                \r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={s.form} >\r\n                <div  className={s.item}>\r\n                    <label htmlFor='title' >Заголовок / Суть:</label>\r\n                    <Field type=\"text\" name=\"title\" id='title' autoComplete='off' className={`${s.input} ${errors.title && touched.title ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"title\" component=\"div\"/>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <label htmlFor='name'>Название:</label>\r\n                    <Field type=\"text\" name=\"name\" id='name' autoComplete='off' className={`${s.input} ${errors.name && touched.name ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"name\" component=\"div\"/>\r\n                </div>\r\n                <div  className={s.item}>\r\n                    <label htmlFor='desc'>Описание:</label>\r\n                    <Field name=\"desc\" autoComplete='off' id='desc' component='textarea' className={s.textarea}/>\r\n                </div>\r\n\r\n                <button className={s.btn} type=\"submit\" disabled={isSubmitting}>Сохранить и перейти в проект</button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\nconst mapDispatchToProps = {\r\n    addNewProj: projectsActions.addNewProject\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AddNewProjForm))","import AddNewProjHeader from \"./AddNewProjHeader/AddNewProjHeader\"\r\nimport s from './addNewProjectPage.module.css'\r\nimport AddNewProjForm from \"./AddNewProjForm/AddNewProjForm\"\r\n\r\n\r\nconst AddNewProjectPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <AddNewProjHeader/>\r\n            <AddNewProjForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjectPage","import { FC } from 'react';\r\nimport s from './allProjFilter.module.css'\r\n\r\ntype AllProjFilterPropsType = {\r\n    filterOption: string\r\n    changeFilterOption: (filterOption: string) => void\r\n}\r\n\r\nconst AllProjFilter: FC<AllProjFilterPropsType> = ({ filterOption, changeFilterOption }) => {\r\n\r\n    const onChange = (e: any) => {\r\n        changeFilterOption(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'all'} type=\"radio\" name=\"filter\" value=\"all\" id=\"all\" className={s.input}/>\r\n                    <label htmlFor=\"all\" className={s.optionLabel}><span>Все</span></label>\r\n                </div> \r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'completed'} type=\"radio\" name=\"filter\" value=\"completed\" id=\"completed\" className={s.input}/>\r\n                    <label htmlFor=\"completed\" className={s.optionLabel}><span>Завершенные</span></label>\r\n                </div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'notCompleted'} type=\"radio\" name=\"filter\" value=\"notCompleted\" id=\"notCompleted\" className={s.input}/>\r\n                    <label htmlFor=\"notCompleted\" className={s.optionLabel}><span>Незавершенные</span></label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllProjFilter","type allTaskObjType = {\r\n    tasks: Array<any>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\nconst taskLevel = (allTaskObj: allTaskObjType, projectId: number ) => {\r\n    let taskCompletedPoin = 0\r\n\r\n    const taskNotCompletedPoint: Array<any> = []\r\n    const tasksLength = allTaskObj.tasks.length\r\n    const oneCompletedTaskProcent = tasksLength ? (100 / tasksLength) : 0  \r\n\r\n    allTaskObj.tasks\r\n        .filter(task => task.forProject === projectId)\r\n        .forEach(task => {\r\n            if(task.completed){\r\n                taskCompletedPoin += 1\r\n            }else{\r\n                if(task.subtasksId.length){\r\n                    const items = allTaskObj.subtasks.filter(subtask => task.subtasksId.indexOf(subtask.id) !== -1 )\r\n                    const ids: Array<number> = []\r\n                    items.forEach(item => ids.push(item.id) )\r\n\r\n                    taskNotCompletedPoint.push({ procentForOneItem: oneCompletedTaskProcent / items.length, subTasks: [ ...items ], subTasksId: ids })\r\n                }\r\n            }\r\n        })\r\n\r\n    return  {\r\n        procent: oneCompletedTaskProcent * taskCompletedPoin,\r\n        taskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subTaskLevel = (allTaskObj: allTaskObjType, taskNotCompletedPoint: Array<any>) => {\r\n    let subtaskCompletedProcent = 0\r\n    const subtaskNotCompletedPoint: Array<any> = []\r\n\r\n    taskNotCompletedPoint.forEach(subtask => {\r\n        subtask.subTasks.forEach((subTask: any) => {\r\n            if(subTask.completed){\r\n                subtaskCompletedProcent += subtask.procentForOneItem\r\n            }else{\r\n                if(subTask.subsubtasksId.length){\r\n                    const items = allTaskObj.subsubtasks.filter(subsubtask => subtask.subTasksId.indexOf(subsubtask.id) !== -1 )\r\n                    subtaskNotCompletedPoint.push({ procentForOneItem: subtask.procentForOneItem / items.length, subTasks: [ ...items ] })\r\n                }\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subtaskCompletedProcent,\r\n        subtaskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subSubTaksLevel = (subtaskNotCompletedPoint: Array<any>) => {\r\n    let subsubtaskCompletedProcent = 0\r\n\r\n    subtaskNotCompletedPoint.forEach(subsubtask => {\r\n        subsubtask.subTasks.forEach((element: any) => {\r\n            if(element.completed){\r\n                subsubtaskCompletedProcent = subsubtaskCompletedProcent + subsubtask.procentForOneItem\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subsubtaskCompletedProcent\r\n    }\r\n}\r\n\r\nconst getProcentCompletedProj = (allTaskObj:allTaskObjType, projectId: number ) => {\r\n    let completedProcent: number = 0\r\n\r\n    const taskLevelResult = taskLevel(allTaskObj, projectId)\r\n    completedProcent = completedProcent + taskLevelResult.procent\r\n\r\n    const subtaskLevelResult = subTaskLevel(allTaskObj, taskLevelResult.taskNotCompletedPoint)\r\n    completedProcent = completedProcent + subtaskLevelResult.procent\r\n\r\n    const subSubtaskLevelResult = subSubTaksLevel(subtaskLevelResult.subtaskNotCompletedPoint)\r\n    completedProcent = completedProcent + subSubtaskLevelResult.procent\r\n\r\n    return Math.ceil(completedProcent) > 100 ? 100 : Math.ceil(completedProcent)\r\n}\r\n\r\nexport default getProcentCompletedProj","const getAllSubtasksId = (tasksArr: Array<any>) => {\r\n    const result: Array<number> = []\r\n    tasksArr.forEach(task => {\r\n        if(task.subtasksId && task.subtasksId.length){\r\n            result.push(...task.subtasksId)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.length){\r\n            result.push(...task.subsubtasksId)\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nconst getSubTasksFromTasks = (tasksArr: Array<any>, subtaskArr: Array<any>) => {\r\n    const subtasksId = getAllSubtasksId(tasksArr)\r\n    const targetSubtasks = subtaskArr.filter(subtask => subtasksId.indexOf(subtask.id) !== -1)\r\n    return targetSubtasks\r\n}\r\n\r\nexport default getSubTasksFromTasks","import { FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport getProcentCompletedProj from \"../../../../heplers/getProcentCompletedProj\"\r\nimport getSubTasksFromTasks from \"../../../../heplers/getSubTasksFromTasks\"\r\nimport { AppStateType } from \"../../../../Redux/reduxStore\"\r\nimport s from '../allProjTable.module.css'\r\n\r\n\r\n\r\ntype AllProjItemPropsType = {\r\n    core: string\r\n    name: string\r\n    desc: string\r\n    id: number\r\n    completed: boolean\r\n    link: string\r\n    deleteProject: (id: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    tasks: Array<any>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\nconst AllProjItem: FC<AllProjItemPropsType & MapStatePropsType> = ({ core, name, desc, completed, link, id, tasks, subtasks, subsubtasks, deleteProject }) => {\r\n\r\n    const targetTasks = tasks.filter(task => task.forProject === id)\r\n    const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n    const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n    \r\n    const procent = getProcentCompletedProj({\r\n        tasks: targetTasks,\r\n        subtasks: targetSubtasks,\r\n        subsubtasks: targetSubSubtasks\r\n    }, id)\r\n\r\n    const deleteItem = () => {\r\n        deleteProject(id)\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{core}</td>\r\n            <td><NavLink to={`/${link}`}>{name}</NavLink></td>\r\n            <td>{desc || '-'}</td>\r\n            <td>{ completed ? '100%' : procent + '%'}</td>\r\n            <td>{ completed ? <span className={s.green}>&#10004;</span> : <span>&#10008;</span>}</td>\r\n            <td>\r\n                <button onClick={deleteItem} className={s.btn}>&#9746;</button>    \r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    tasks: state.tasksReducer.tasks,\r\n    subtasks: state.tasksReducer.subtasks,\r\n    subsubtasks: state.tasksReducer.subsubtasks\r\n})\r\n\r\nexport default connect(mapStateToProps)(AllProjItem)","import { FC } from \"react\"\r\nimport AllProjItem from \"./AllProjItem/AllProjItem\"\r\nimport s from './allProjTable.module.css'\r\n\r\ntype AllProjTablePropsType = {\r\n    targetProjects: Array<any>\r\n    deleteProject: (id: number) => void\r\n}\r\n\r\nconst AllProjTable: FC<AllProjTablePropsType> = ({ targetProjects, deleteProject }) => {\r\n\r\n    const projectToTable = targetProjects\r\n        .map(project => <AllProjItem \r\n            key={project.id} \r\n            core={project.core}\r\n            name={project.name} \r\n            desc={project.desc}\r\n            completed={project.completed}\r\n            id={project.id}\r\n            link={project.link}\r\n            deleteProject={deleteProject}\r\n        />)\r\n\r\n    return (\r\n        <table className={s.table}>\r\n            <thead>\r\n                <tr>\r\n                    <td>Суть</td>\r\n                    <td>Название</td>\r\n                    <td>Описание</td>\r\n                    <td>Прогресс</td>\r\n                    <td>Завершено</td>\r\n                    <td>Удалить</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { projectToTable }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default AllProjTable","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\nimport AllProjFilter from './AllProjFilter/AllProjFilter'\r\nimport s from './allProjPage.module.css'\r\nimport AllProjTable from './AllProjTable/AllProjTable'\r\n\r\ntype AllProjPagePropsType = {\r\n    filterOption: string\r\n    deleteProject: (id: number) => void\r\n    changeFilterOption: (filterOption: string) => void\r\n    targetProjects: Array<ProjectType>\r\n}\r\n\r\nconst AllProjPage: FC<AllProjPagePropsType> = ({ targetProjects, filterOption, deleteProject, changeFilterOption }) => {\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.header}>\r\n                <h2>Все проекты</h2>\r\n            </div>\r\n            { targetProjects.length ? (\r\n                <>\r\n                    <AllProjFilter filterOption={filterOption} changeFilterOption={changeFilterOption}/>\r\n                    <AllProjTable targetProjects={targetProjects} deleteProject={deleteProject}/>\r\n                    <div className={s.linkArea}>\r\n                        <NavLink to='/add-new-project'>Добавить новый проект</NavLink>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <p className={s.noProj}>Проектов пока нет. <NavLink to='/add-new-project'>Добавьте первый.</NavLink></p>\r\n            ) }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AllProjPage","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { projectsActions, ProjectType } from '../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../Redux/reduxStore'\r\nimport AllProjPage from './AllProjPage'\r\n\r\ntype AllProjPageContainerPropsType = {\r\n\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n    filterOption: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteProject: (id: number) => void\r\n    changeFilterOption: (filterOption: string) => void\r\n}\r\n\r\nconst AllProjPageContainer: FC<AllProjPageContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({ projects, filterOption, deleteProject, changeFilterOption }) => {\r\n\r\n    const targetProjects = projects.filter(project => {\r\n        if(filterOption === 'all'){\r\n            return project\r\n        }else if(filterOption === 'completed'){\r\n            return project.completed\r\n        }else{\r\n            return !project.completed\r\n        }\r\n    })\r\n\r\n    return <AllProjPage \r\n        targetProjects={targetProjects}\r\n        filterOption={filterOption}\r\n        deleteProject={deleteProject}\r\n        changeFilterOption={changeFilterOption}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects,\r\n    filterOption: state.projectsReducer.filterOption\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    deleteProject: projectsActions.deleteProject,\r\n    changeFilterOption: projectsActions.changeFilterOption\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjPageContainer)\r\n","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './burger.module.css'\r\n\r\ntype BurgerPropsType = {\r\n    openMenu: boolean,\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Burger: FC<BurgerPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={s.burger}>\r\n            <svg viewBox=\"0 0 800 600\" className={`${s.svg} ${openMenu ? s.open : ''}`} onClick={() => setOpenMenu(!openMenu)}>\r\n                <path d=\"M300,220 C300,220 520,220 540,220 C740,220 640,540 520,420 C440,340 300,200 300,200\" className={s.topBar} />\r\n                <path d=\"M300,320 L540,320\" className={s.middleBar} />\r\n                <path d=\"M300,210 C300,210 520,210 540,210 C740,210 640,530 520,410 C440,330 300,190 300,190\" className={s.bottomBar} transform=\"translate(480, 320) scale(1, -1) translate(-480, -318)\" />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Burger","import { NavLink } from 'react-router-dom'\r\nimport s from './home.module.css'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className={s.home}>\r\n            <NavLink className={s.link} to='/'>\r\n                <div className={s.img}></div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { Dispatch, FC, SetStateAction } from \"react\"\r\nimport { NavLink, RouteComponentProps, withRouter } from \"react-router-dom\"\r\nimport s from './projectItem.module.css'\r\n\r\ntype ProjectItemPropsType = {\r\n    name: string\r\n    link: string\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst ProjectItem: FC<ProjectItemPropsType & RouteComponentProps> = ({ name, link, setOpenMenu, location }) => {\r\n\r\n    const activeLink = location.pathname.match(link)\r\n\r\n    return (\r\n        <li>\r\n            <NavLink \r\n                onClick={() => setOpenMenu(false)}\r\n                className={(activeLink && activeLink[0]) === link ? `${s.link} ${s.active}` : `${s.link}`} \r\n                to={link}\r\n            >{name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default withRouter(ProjectItem)","import { Dispatch, FC, SetStateAction } from \"react\"\r\nimport s from './projects.module.css'\r\n\r\ntype ProjectPropsType = {\r\n    activeMode: boolean\r\n    projectsItems: Array<JSX.Element>\r\n    setShowList: Dispatch<SetStateAction<boolean>>\r\n    showList: boolean\r\n}\r\n\r\nconst Projects: FC<ProjectPropsType> = ({ activeMode, projectsItems, setShowList, showList }) => {\r\n    return (\r\n        <div className={`${s.container} ${showList ? s.active : ''}`}>\r\n            <h2 className={s.header} onClick={() => setShowList(!showList)}> {activeMode ? 'Активные проекты' : 'Завершенные проекты'} <span>({projectsItems.length})</span> </h2>\r\n            <ul className={s.list}>\r\n                { projectsItems }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects","import React, { Dispatch, FC, SetStateAction, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { ProjectType } from '../../../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../../../Redux/reduxStore'\r\nimport ProjectItem from './ProjectItem/ProjectItem'\r\nimport Projects from './Projects'\r\n\r\ntype ProjectsContainerPropsType = {\r\n    activeMode: boolean\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst ProjectsContainer: FC<ProjectsContainerPropsType & MapStatePropsType> = ({ activeMode, projects, openMenu, setOpenMenu }) => {\r\n\r\n    const [ showList, setShowList ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(openMenu === false){\r\n            setShowList(false)\r\n        }\r\n    }, [openMenu])\r\n\r\n    const projectsItems = projects\r\n        .filter(project => project.completed === !activeMode )\r\n        .map(project => <ProjectItem key={project.id} setOpenMenu={setOpenMenu} name={project.name} link={project.link} />)\r\n\r\n    return <Projects \r\n        activeMode={activeMode} \r\n        projectsItems={projectsItems}\r\n        setShowList={setShowList}\r\n        showList={showList}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectsContainer)\r\n","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './menu.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport ProjectsContainer from './Projects/ProjectsContainer'\r\n\r\ntype MenuPropsType = {\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Menu: FC<MenuPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={`${s.menu} ${openMenu ? s.show : ''}`}>\r\n            <ProjectsContainer openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={true}/>\r\n            <ProjectsContainer openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={false}/>\r\n            <NavLink onClick={() => setOpenMenu(false)} className={s.addNewProj} to='/add-new-project'>Добавить новый проект</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport Burger from './Burger/Burger'\r\nimport s from './header.module.css'\r\nimport Home from './Home/Home'\r\nimport Menu from './Menu/Menu'\r\n\r\ntype HeaderPropsType = {\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Header: FC<HeaderPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <header className={`${s.header} ${openMenu ? s.wide : ''}`}>    \r\n            <Burger openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Menu openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Home/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { FC, useEffect, useState } from \"react\"\r\nimport { RouteComponentProps, withRouter } from \"react-router\"\r\nimport Header from \"./Header\"\r\n\r\nconst HeaderContainer: FC<RouteComponentProps> = ({ location }) => {\r\n    const [ openMenu, setOpenMenu ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setOpenMenu(false)\r\n    }, [location.pathname])\r\n\r\n    return <Header openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n}\r\n\r\nexport default withRouter(HeaderContainer)","import s from './mainPageHeader.module.css'\r\n\r\nconst MainPageHeader = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={s.header}>Добро пожаловать в менеджер проектов!</h1>\r\n            <div className={s.info}>\r\n                <p>Данная программа поможет вам управлять своими проектами.</p> \r\n                <p>Вы сможете составлять пошаговую схему работы проекта, контролировать процесс разработки, ставить задачи, а также разбивать их на подзадачи.</p>\r\n                <p>Приятного пользования и хороших проектов!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MainPageHeader","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './card.module.css'\r\n\r\ntype CardPropsType = {\r\n    title: string\r\n    addProject: boolean\r\n}\r\n\r\nconst Card: FC<CardPropsType> = ({ children, title, addProject }) => {\r\n    return (\r\n        <div className={s.card}>\r\n            <h2 className={s.header}>{ title }</h2>\r\n            <div className={s.body}>\r\n                { children }\r\n            </div>\r\n            { !addProject && (\r\n                <div>\r\n                    <NavLink className={s.showAllLink} to='/all-projects'>Показать все...</NavLink>\r\n                </div> \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import { ProjectType } from \"../Redux/projectsReducer\"\r\n\r\nconst last10Items = (arr: Array<ProjectType>) => {\r\n    const resultArr: Array<ProjectType> = []\r\n    for(let i = 0; i <10; i++){\r\n        if(arr[i]){\r\n            resultArr.push(arr[i])\r\n        }else break\r\n    }\r\n    return resultArr.reverse()\r\n}\r\n\r\nexport default last10Items","import { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport getProcentCompletedProj from '../../../../../heplers/getProcentCompletedProj'\r\nimport getSubTasksFromTasks from '../../../../../heplers/getSubTasksFromTasks'\r\nimport last10Items from '../../../../../heplers/last10Items'\r\nimport { ProjectType } from '../../../../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../../../../Redux/reduxStore'\r\nimport { TaskType } from '../../../../../Redux/tasksReducer'\r\nimport s from './projectList.module.css'\r\n\r\ntype ProjectListPropsType = {\r\n    allMode: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n    tasks: Array<TaskType>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\nconst ProjectList: FC<ProjectListPropsType & MapStatePropsType> = ({ allMode, projects, tasks, subtasks, subsubtasks }) => {\r\n\r\n    const projectList = allMode ? projects : projects.filter(project => project.completed === false)\r\n    const last10 = last10Items(projectList)\r\n    const projectItems = last10.map(project => {\r\n\r\n        const targetTasks = tasks.filter(task => task.forProject === project.id)\r\n        const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n        const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n        \r\n        const procent = getProcentCompletedProj({\r\n            tasks: targetTasks,\r\n            subtasks: targetSubtasks,\r\n            subsubtasks: targetSubSubtasks\r\n        }, project.id)\r\n\r\n        return (\r\n            <li key={project.id}>\r\n                <NavLink to={project.link}>{project.name}</NavLink>\r\n                <div className={s.progress} title='Статус по задачам'>\r\n                    <div className={s.status}>{project.completed ? '100%' : procent + '%'}</div>\r\n                    <div style={project.completed ? {width: '100%'} : {width: procent + '%'}} className={s.line}></div>\r\n                </div>\r\n            </li>\r\n        )}\r\n    )\r\n\r\n    if(!projectItems.length){\r\n        return <p className={s.noProj}>{allMode ? 'Проектов пока нет!' : 'Активных проектов пока нет!'}</p>\r\n    }\r\n\r\n    return (\r\n        <ul className={s.list}>\r\n            {projectItems}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects,\r\n    tasks: state.tasksReducer.tasks,\r\n    subtasks: state.tasksReducer.subtasks,\r\n    subsubtasks: state.tasksReducer.subsubtasks\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectList)","export default __webpack_public_path__ + \"static/media/plus-for-card.5262e5f6.svg\";","import { NavLink } from \"react-router-dom\"\r\nimport Card from \"./Card/Card\"\r\nimport ProjectList from \"./Card/ProjectList/ProjectList\"\r\nimport s from './cards.module.css'\r\nimport plus from '../../../assets/icons/plus-for-card.svg'\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <Card title='Добавить новый проект' addProject={true}>\r\n                <NavLink to='/add-new-project'>\r\n                    <img className={s.img} src={plus} alt='add'/>\r\n                </NavLink>\r\n            </Card>\r\n            <Card title='Последние активные проекты' addProject={false}>\r\n                <ProjectList allMode={false} />\r\n            </Card>\r\n            <Card title='Последние проекты' addProject={false}>\r\n                <ProjectList allMode={true} />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import MainPageHeader from \"./MainPageHeader/MainPageHeader\"\r\nimport s from './mainPage.module.css'\r\nimport Cards from \"./Cards/Cards\"\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <MainPageHeader />\r\n            <Cards />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage","const changeCompletedTaskStatus = (tasks: any, id: number) => {\r\n    return [ ...tasks.map((task: any) => {\r\n        if(task.id === id){\r\n            task.completed = !task.completed\r\n        }\r\n        return task\r\n    }) ]\r\n}\r\n\r\n\r\nexport default changeCompletedTaskStatus","const removeSubtaskNum = (tasks: any, id: number) => {\r\n    return tasks.map((task: any) => {\r\n        if(task.subtasksId && task.subtasksId.indexOf(id) !== -1){\r\n            task.subtasksId = task.subtasksId.filter((subtaskId: any) => subtaskId !== id)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.indexOf(id) !== -1){\r\n            task.subsubtasksId = task.subsubtasksId.filter((subsubtaskId: any) => subsubtaskId !== id)\r\n        }\r\n        return task\r\n    })\r\n}\r\n\r\nexport default removeSubtaskNum","const removeTaskAndAllSubtasks = (tasks: Array<any>, removeId: number, subtasks: any, subsubtasks: any = null) => {\r\n    const filteredTasks = tasks.filter(task => task.id === removeId) || subtasks.filter((task: any) => task.id === removeId)\r\n    const subtasksId = filteredTasks[0].subtasksId || filteredTasks[0].subsubtasksId\r\n    const targetSubtasks = (subtasksId && subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) !== -1)) || [] \r\n    \r\n    const allSubSubId: Array<number> = []\r\n    if(targetSubtasks.length){\r\n        targetSubtasks.forEach((subtask: any) => {\r\n            if(subtask.subsubtasksId && subtask.subsubtasksId.length){\r\n                allSubSubId.push( ...subtask.subsubtasksId )\r\n            }\r\n        });\r\n    }\r\n\r\n    const newSubSubTasks = allSubSubId.length ? subsubtasks.filter((subsubtask: any) => allSubSubId.indexOf(subsubtask.id) === -1) : subsubtasks\r\n    const newSubtasks = subtasksId && subtasksId.length ? subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) === -1) : subtasks\r\n    const newTasks = tasks.filter(task => task.id !== removeId)\r\n\r\n    return {\r\n        newTasks,\r\n        newSubtasks,\r\n        newSubSubTasks\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default removeTaskAndAllSubtasks","import changeCompletedTaskStatus from \"../heplers/changeCompletedTaskStatus\"\r\nimport removeSubtaskNum from \"../heplers/removeSubtaskNum\"\r\nimport removeTaskAndAllSubtasks from \"../heplers/removeTaskAndAllSubtasks\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst CHANGE_COMPLETED_STATUS = 'CHANGE_COMPLETED_STATUS'\r\nconst SET_COMPLETED_STATUS = 'SET_COMPLETED_STATUS'\r\nconst ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nconst CHANGE_TASK_ORDER = 'CHANGE_TASK_ORDER'\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    forProject?: number\r\n    text: string\r\n    order: number\r\n    completed: boolean\r\n    subtasksId: any\r\n}\r\n\r\nconst initialValue = {\r\n    tasks: [\r\n        {id: 1, forProject: 1, text: 'Сделать хедер', order: 1, completed: false, subtasksId: [1, 2, 3]},\r\n        {id: 2, forProject: 1, text: 'Сделать футер', order: 2, completed: true, subtasksId: []},\r\n        {id: 3, forProject: 1, text: 'Спасти Вселенную', order: 3, completed: true, subtasksId: []},\r\n        {id: 4, forProject: 5, text: 'Сделать хедер', order: 1, completed: false, subtasksId: []},\r\n        {id: 5, forProject: 5, text: 'Сделать футер', order: 2, completed: true, subtasksId: []}\r\n    ],\r\n    subtasks: [\r\n        {id: 1, text: 'Написать html-разметку', completed: false, order: 1, subsubtasksId: [1, 2]},\r\n        {id: 2, text: 'Написать стили', completed: true, order: 2, subsubtasksId: []},\r\n        {id: 3, text: 'Сделать бургер-меню', completed: false, order: 3, subsubtasksId: []},\r\n    ],\r\n    subsubtasks: [\r\n        {id: 1, text: 'Не забыть тег хедер', order: 1, completed: true },\r\n        {id: 2, text: 'Прижать к верху страницы', order: 1, completed: false },\r\n    ],\r\n}\r\n\r\nexport const tasksActions = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null = null) => (\r\n        { type: DELETE_TASK, id, level, subtasksId}\r\n    ),\r\n    changeCompletedStatus: (id: number, level: number) => ({ type: CHANGE_COMPLETED_STATUS, id, level }),\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => ({ type: SET_COMPLETED_STATUS, id, status, level }),\r\n    addNewTask: (task: string, level: number, idTask: number | null, projectId?: number) => ({ type: ADD_NEW_TASK, task, level, idTask, projectId }),\r\n    changeTaskOrder: (id: number, order: number, level: number) => ({ type: CHANGE_TASK_ORDER, id, order, level}),\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof tasksActions>\r\n\r\nconst tasksReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case DELETE_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.tasks, action.id, state.subtasks, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: tasksWithoutRemovedElements.newTasks,\r\n                        subtasks: tasksWithoutRemovedElements.newSubtasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubSubTasks\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.subtasks, action.id, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: removeSubtaskNum(state.tasks, action.id),\r\n                        subtasks: tasksWithoutRemovedElements.newTasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubtasks\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: removeSubtaskNum(state.subtasks, action.id),\r\n                        subsubtasks: state.subsubtasks.filter(subsubtask => subsubtask.id !== action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: changeCompletedTaskStatus(state.tasks, action.id)\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: changeCompletedTaskStatus(state.subtasks, action.id)\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: changeCompletedTaskStatus(state.subsubtasks, action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case SET_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.id){\r\n                                task.completed = action.status\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.id){\r\n                                subtask.completed = action.status\r\n                            }\r\n                            return subtask\r\n                        })\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case ADD_NEW_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const subtasksOrders = state.subtasks.map(subtask => subtask.order)\r\n\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.idTask){\r\n                                task.subtasksId.push(id)\r\n                            }\r\n                            return task\r\n                        }),\r\n                        subtasks: [ ...state.subtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            order: Math.max(...subtasksOrders) + 1,\r\n                            subsubtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const subsubtasksOrders = state.subsubtasks.map(subsubtask => subsubtask.order)\r\n\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.idTask){\r\n                                subtask.subsubtasksId.push(id)\r\n                            }\r\n                            return subtask\r\n                        }),\r\n                        subsubtasks: [ ...state.subsubtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            order: Math.max(...subsubtasksOrders) + 1,\r\n                            completed: false\r\n                        }]\r\n                    }\r\n                }\r\n                case -1: {\r\n                    const orders = state.tasks\r\n                        .filter(task => task.forProject === action.projectId)\r\n                        .map(task => task.order)\r\n                    return {\r\n                        ...state,\r\n                        tasks: [...state.tasks, {\r\n                            id: Date.now(),\r\n                            forProject: action.projectId,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            order: Math.max(...orders) + 1,\r\n                            subtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_TASK_ORDER: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.id){\r\n                                task.order = action.order\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.id){\r\n                                subtask.order = action.order\r\n                            }\r\n                            return subtask\r\n                        })\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: state.subsubtasks.map(subsubtask => {\r\n                            if(subsubtask.id === action.id){\r\n                                subsubtask.order = action.order\r\n                            }\r\n                            return subsubtask\r\n                        })\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { Dispatch, FC, SetStateAction, useEffect } from \"react\"\r\nimport s from './addNewTaskForm.module.css'\r\n\r\n\r\ntype AddNewTaskFormPropType = {\r\n    addSubtask: (task: string) => void\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    setShowSubtasks?: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst AddNewTaskForm: FC<AddNewTaskFormPropType> = ({ addSubtask, changeCreateSubtasksMode, setShowSubtasks }) => {\r\n\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ task: '' }}\r\n            validate={values => {\r\n                const errors: any = {};\r\n                if (!values.task) {\r\n                    errors.task = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                if(setShowSubtasks){\r\n                    setShowSubtasks(true)\r\n                }\r\n                addSubtask(values.task)\r\n                setSubmitting(false)\r\n                changeCreateSubtasksMode(false)\r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={`${s.form} ${touched.task && errors.task ? s.err : ''}`}>\r\n                <Field type=\"text\" name=\"task\" autoComplete='off' className={s.input}/>\r\n                <ErrorMessage name=\"task\" component=\"div\" className={s.errorMess} />\r\n                <button className={`${s.btn} ${s.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                <button className={`${s.btn} ${s.close}`} onClick={() => changeCreateSubtasksMode(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewTaskForm","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport AddNewTaskForm from '../../../common/AddNewTaskForm/AddNewTaskForm'\r\nimport s from './taskItem.module.css'\r\n\r\ntype TaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    subsubtasksId?: Array<number> \r\n    showSubtasks: boolean\r\n    setShowSubtasks: Dispatch<SetStateAction<boolean>>\r\n    subtasksGenerate: Array<JSX.Element> | any\r\n    isCompleted: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void\r\n    createSubtasksMode: boolean\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    changeTaskOrder: (id: number, order: number, level: number) => void\r\n    dragStartHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragEndHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragOverHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dropHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n}\r\n\r\nconst TaskItem: FC<TaskItemPropsType> = ({ id, text, completed, subsubtasksId, setShowSubtasks, showSubtasks, subtasksGenerate, isCompleted, deleteTask, changeCompletedStatus, addNewTask, createSubtasksMode, changeCreateSubtasksMode, changeTaskOrder, dragStartHandler, dragEndHandler, dragOverHandler, dropHandler }) => {\r\n\r\n    const addSubtaskFromLevel0 = (task: string) => {\r\n        addNewTask(task, 0, id)\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowSubtasks(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const removeTask = () => {\r\n        deleteTask(id, 0, subsubtasksId as null | Array<number>)\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 0)\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onDragStart={(e) => dragStartHandler(e)}\r\n            onDragLeave={(e) => dragEndHandler(e)}\r\n            onDragEnd={(e) => dragEndHandler(e)}\r\n            onDragOver={(e) => dragOverHandler(e)}\r\n            onDrop={(e) => dropHandler(e)}\r\n            draggable='true' \r\n            className={`${s.item} ${subsubtasksId?.length && showSubtasks ? s.show : ''} ${!subsubtasksId?.length ? s.without : ''}`}\r\n        >\r\n            <div className={s.innerTrigger}>\r\n                <div className={s.target} onClick={() => setShowSubtasks(!showSubtasks)} style={isCompleted ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n                <div className={s.options}>\r\n                    {!subsubtasksId?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button title='Добавить подзадачу' onClick={addSubtaskHandler} className={s.addSubtaskbtn}></button>\r\n                    <button title='Удалить' onClick={removeTask} className={s.delete}></button>\r\n                </div>\r\n            </div>\r\n            <div className={s.body}>\r\n                {showSubtasks && subtasksGenerate.length ? subtasksGenerate : ''}\r\n                { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel0} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowSubtasks} /></div> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem","import { FC } from 'react'\r\nimport s from './subTaskItem.module.css'\r\n\r\ntype SubTaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n}\r\n\r\nconst SubTaskItem: FC<SubTaskItemPropsType> = ({id,  text, completed, deleteTask, changeCompletedStatus }) => {\r\n\r\n    const removeSubtaskItem = () => {\r\n        deleteTask(id, 2, null)\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 2)\r\n    }\r\n\r\n    return (\r\n        <div \r\n            draggable='true' \r\n            className={s.subInnerTrigger}\r\n        >\r\n            <div className={s.subtaskItem} style={completed ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n            <div className={s.optionsBar}>\r\n                <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button>\r\n                <button title='Удалить' onClick={removeSubtaskItem} className={s.delete}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskItem","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport s from './taskSubitem.module.css'\r\nimport AddNewTaskForm from \"../../../../common/AddNewTaskForm/AddNewTaskForm\"\r\n\r\ntype TaskSubitemPropsType = {\r\n    text: string\r\n    showTask: boolean\r\n    isCompleted: boolean\r\n    subtasksGenerate: any\r\n    completed: boolean\r\n    addSubtaskHandler: () => void\r\n    removeSubitem: () => void\r\n    toggleCompletedStatus: () => void\r\n    addSubtaskFromLevel1: (task: string) => void\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    setShowTask: Dispatch<SetStateAction<boolean>>\r\n    createSubtasksMode: boolean\r\n}\r\n\r\nconst TaskSubitem: FC<TaskSubitemPropsType> = ({ text, showTask, isCompleted, completed, subtasksGenerate, addSubtaskHandler, removeSubitem, toggleCompletedStatus, addSubtaskFromLevel1, changeCreateSubtasksMode, setShowTask, createSubtasksMode }) => {\r\n\r\n    const completedSubtask = !subtasksGenerate?.length ? completed : isCompleted\r\n\r\n    return (\r\n        <div className={`${s.subitem} ${showTask ? s.show : ''}`}> \r\n            <div className={s.innerTrigger}>\r\n                <div className={`${s.trigger} ${!subtasksGenerate?.length ? s.withoutArr : ''}`} onClick={() => setShowTask(!showTask)} style={completedSubtask ? {textDecoration: 'line-through'} : {}} >- {text}</div>\r\n                <div className={`${s.optionsBar} ${!subtasksGenerate?.length ? s.big : ''}`}>\r\n                    {!subtasksGenerate?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button onClick={addSubtaskHandler} title='Добавить подзадачу' className={s.addSubtaskbtn}></button>\r\n                    <button onClick={removeSubitem} title='Удалить' className={s.delete}></button>\r\n                </div>\r\n            </div> \r\n            <div className={s.body}>{showTask ? subtasksGenerate : ''}</div>\r\n            { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel1} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowTask} /></div> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskSubitem","import { FC, useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../../Redux/reduxStore\"\r\nimport { tasksActions } from \"../../../../../Redux/tasksReducer\"\r\nimport SubTaskItem from \"./SubTaskItem/SubTaskItem\"\r\nimport TaskSubitem from \"./TaskSubitem\"\r\n\r\ntype TaskSubitemContainerPropsType = {\r\n    id: number\r\n    text: string\r\n    subsubtasksId: Array<number>\r\n    order: number\r\n    completed: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    subsubtasks: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void \r\n}\r\n\r\nconst TaskSubitemContainer: FC<TaskSubitemContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({ id, text, subsubtasksId, completed, subsubtasks, deleteTask, changeCompletedStatus, setCompletedStatus, addNewTask }) => {\r\n    const [showTask, setShowTask] = useState(false)\r\n\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const addSubtaskFromLevel1 = (task: string) => {\r\n        addNewTask(task, 1, id)\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowTask(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 1)\r\n    }\r\n\r\n    const subtasksElems = subsubtasksId.map((subtaskId: any) => {\r\n        for(let i = 0; i <= subsubtasks.length; i++){\r\n            if(subsubtasks[i] && subsubtasks[i].id === subtaskId){\r\n                return subsubtasks[i]\r\n            }\r\n        }\r\n    })\r\n\r\n    const subtasksGenerate = subtasksElems.map((subsubtask: any) => subsubtask && <SubTaskItem key={subsubtask.id} id={subsubtask.id} completed={subsubtask.completed} text={subsubtask.text} deleteTask={deleteTask} changeCompletedStatus={changeCompletedStatus} /> )\r\n\r\n    const isCompleted = subtasksElems.every(subsubtasksId => subsubtasksId && subsubtasksId.completed)\r\n\r\n    useEffect(() => {\r\n        setCompletedStatus(id, isCompleted, 1)\r\n    }, [isCompleted])\r\n\r\n    const removeSubitem = () => {\r\n        deleteTask(id, 1, subsubtasksId)\r\n    }\r\n\r\n    return <TaskSubitem \r\n        text={text} \r\n        completed={completed}\r\n        isCompleted={isCompleted} \r\n        showTask={showTask}\r\n        subtasksGenerate={subtasksGenerate}\r\n        addSubtaskHandler={addSubtaskHandler}\r\n        removeSubitem={removeSubitem}\r\n        addSubtaskFromLevel1={addSubtaskFromLevel1}\r\n        changeCreateSubtasksMode={changeCreateSubtasksMode}\r\n        setShowTask={setShowTask}\r\n        createSubtasksMode={createSubtasksMode}\r\n        toggleCompletedStatus={toggleCompletedStatus}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    subsubtasks: state.tasksReducer.subsubtasks,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    setCompletedStatus: tasksActions.setCompletedStatus,\r\n    addNewTask: tasksActions.addNewTask,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSubitemContainer)","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../Redux/reduxStore\"\r\nimport { tasksActions } from \"../../../../Redux/tasksReducer\"\r\nimport TaskItem from \"./TaskItem\"\r\nimport TaskSubitemContainer from \"./TaskSubitem/TaskSubitemContainer\"\r\n\r\ntype TaskItemContainerPropsType = {\r\n    text: string\r\n    subtasksId?: Array<number>\r\n    completed: boolean\r\n    id: number\r\n    order: number\r\n    dragStartOrder: number\r\n    setDragStartOrder: Dispatch<SetStateAction<number>>\r\n    dragStartId: number\r\n    setDragStartId: Dispatch<SetStateAction<number>>\r\n    sortTasks: (a: any, b: any) => number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    subtasks: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void\r\n    changeTaskOrder: (id: number, order: number, level: number) => void\r\n}\r\n\r\n\r\nconst TaskItemContainer: FC<TaskItemContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({id, text, order, subtasksId, completed, subtasks, deleteTask, changeCompletedStatus, setCompletedStatus, addNewTask, changeTaskOrder , dragStartOrder, setDragStartOrder, dragStartId, setDragStartId, sortTasks}) => {\r\n\r\n    const [showSubtasks, setShowSubtasks] = useState(false)\r\n\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const subtasksFind = subtasksId?.length ? \r\n        subtasksId.map(subtaskId => {\r\n            for(let i = 0; i <= subtasks.length; i++){\r\n                if(subtasks[i] && subtasks[i].id === subtaskId){\r\n                    return subtasks[i]\r\n                }\r\n            }\r\n        })\r\n        : []\r\n\r\n    const subtasksGenerate = subtasksFind\r\n        .sort(sortTasks)\r\n        .map(subtask => {\r\n        if(subtask && subtask.subsubtasksId){\r\n            return <TaskSubitemContainer \r\n                key={subtask.id} \r\n                id={subtask.id} \r\n                order={subtask.order} \r\n                text={subtask.text} \r\n                completed={subtask.completed}\r\n                subsubtasksId={subtask.subsubtasksId} \r\n                deleteTask={deleteTask} \r\n                changeCompletedStatus={changeCompletedStatus}\r\n            />\r\n        }\r\n    })\r\n\r\n    const isCompleted = subtasksId?.length ? subtasksFind?.every(subtask => subtask && subtask.completed) : completed\r\n\r\n    useEffect(() => {\r\n            setCompletedStatus(id, isCompleted, 0)\r\n    }, [isCompleted])\r\n\r\n    // ============ drag and drop ===============\r\n\r\n    const dragStartHandler = (e: any) => {\r\n        setDragStartId(id)\r\n        setDragStartOrder(order)\r\n        e.target.style.opacity = '0.5'\r\n    }\r\n\r\n    const dragEndHandler = (e: any) => {\r\n        e.target.style.opacity = '1'\r\n        if(e.target.classList.contains('taskItem_dragOver__2O2xP')){\r\n            e.target.classList.remove('taskItem_dragOver__2O2xP')\r\n        }else{\r\n            const childsArr = document.querySelectorAll('.taskItem_dragOver__2O2xP')\r\n            if(childsArr.length){\r\n                childsArr.forEach(child => child.classList.remove('taskItem_dragOver__2O2xP'))\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragOverHandler = (e: any) => {\r\n        e.preventDefault()\r\n        if(e.target.classList.contains('taskItem_target__1AnYX')){\r\n            e.target.classList.add('taskItem_dragOver__2O2xP')\r\n        }\r\n        \r\n    }\r\n\r\n    const dropHandler = (e: any) => {\r\n        e.preventDefault()\r\n        changeTaskOrder(dragStartId, order, 0)\r\n        changeTaskOrder(id, dragStartOrder, 0)\r\n        \r\n    }\r\n\r\n    return <TaskItem\r\n        id={id}\r\n        text={text} \r\n        completed={completed} \r\n        subsubtasksId={subtasksId} \r\n        showSubtasks={showSubtasks} \r\n        setShowSubtasks={setShowSubtasks}\r\n        isCompleted={isCompleted}\r\n        subtasksGenerate={subtasksGenerate}\r\n        deleteTask={deleteTask}\r\n        changeCompletedStatus={changeCompletedStatus}\r\n        addNewTask={addNewTask}\r\n        createSubtasksMode={createSubtasksMode}\r\n        changeCreateSubtasksMode={changeCreateSubtasksMode}\r\n        changeTaskOrder={changeTaskOrder}\r\n        dragStartHandler={dragStartHandler}\r\n        dragEndHandler={dragEndHandler}\r\n        dragOverHandler={dragOverHandler}\r\n        dropHandler={dropHandler}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    subtasks: state.tasksReducer.subtasks\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    deleteTask: tasksActions.deleteTask,\r\n    changeCompletedStatus: tasksActions.changeCompletedStatus,\r\n    setCompletedStatus: tasksActions.setCompletedStatus,\r\n    addNewTask: tasksActions.addNewTask,\r\n    changeTaskOrder: tasksActions.changeTaskOrder,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItemContainer)","import { FC, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\nimport { TaskType } from \"../../../Redux/tasksReducer\"\r\nimport s from './projectTasks.module.css'\r\nimport TaskItemContainer from \"./TaskItem/TaskItemContainer\"\r\n\r\n\r\ntype ProjectTasksPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nconst ProjectTasks: FC<ProjectTasksPropsType & MapStatePropsType> = ({ projectId, tasks }) => {\r\n\r\n    const findedTasks = tasks.filter(task => task.forProject === projectId)\r\n\r\n    const [dragStartOrder, setDragStartOrder] = useState(0)\r\n    const [dragStartId, setDragStartId] = useState(0)\r\n\r\n    if(!findedTasks.length){\r\n        return <p className={s.noTasks}>Задач на проект пока нет!</p>\r\n    }\r\n\r\n    const sortTasks = (a: any, b: any) => a.order > b.order ? 1 : -1\r\n\r\n    const taskElem = findedTasks\r\n        .sort(sortTasks)\r\n        .map(task => <TaskItemContainer \r\n            key={task.id} \r\n            id={task.id} \r\n            order={task.order} \r\n            text={task.text} \r\n            subtasksId={task.subtasksId} \r\n            completed={task.completed} \r\n            dragStartOrder={dragStartOrder}\r\n            setDragStartOrder={setDragStartOrder}\r\n            dragStartId={dragStartId}\r\n            setDragStartId={setDragStartId}\r\n            sortTasks={sortTasks}\r\n        />)\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            {taskElem}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    tasks: state.tasksReducer.tasks\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectTasks)","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { FC, useEffect, useState } from \"react\"\r\nimport s from './addTaskForm.module.css'\r\nimport s2 from '../../common/AddNewTaskForm/addNewTaskForm.module.css'\r\nimport { tasksActions } from \"../../../Redux/tasksReducer\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\n\r\ntype MapDispatchPropsType = {   \r\n    addNewTask: (task: string, level: number, idTask: number | null, projectId?: number) => void\r\n}\r\n\r\ntype AddTaskFormPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst AddTaskForm: FC<AddTaskFormPropsType & MapDispatchPropsType> = ({ addNewTask, projectId }) => {\r\n\r\n    const [openForm, setOpenForm] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [openForm])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            \r\n            { openForm ? (\r\n                <Formik\r\n                    initialValues={{ newTask: '' }}\r\n                    validate={values => {\r\n                        const errors: any = {};\r\n                        if (!values.newTask) {\r\n                            errors.newTask = '* Это поле не может быть пустым';\r\n                        }\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        addNewTask(values.newTask, -1, null, projectId)\r\n                        setOpenForm(false)\r\n                        setSubmitting(false)\r\n                    }}\r\n                >\r\n                {({ isSubmitting, errors, touched }) => (\r\n                    <Form className={`${s2.form} ${touched.newTask && errors.newTask ? s2.err : ''}`}>\r\n                        <Field type=\"text\" name=\"newTask\" autoComplete='off' className={s2.input}/>\r\n                        <ErrorMessage name=\"newTask\" component=\"div\" className={s2.errorMess} />\r\n                        <button className={`${s2.btn} ${s2.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                        <button className={`${s2.btn} ${s2.close}`} onClick={() => setOpenForm(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n            ) : (\r\n                <div className={s.togglerInner}>\r\n                    - <button className={s.toggler} onClick={() => setOpenForm(true)} ></button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({})\r\n\r\nconst mapDispatchToProps = {\r\n    addNewTask: tasksActions.addNewTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm)","import s from './projectPage.module.css'\r\nimport ProjectTasks from \"./ProjectTasks/ProjectTasks\"\r\nimport AddTaskForm from './AddTaskForm/AddTaskForm'\r\nimport { FC } from 'react'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\n\r\ntype ProjectPagePropsType = {\r\n    targetProject: ProjectType\r\n}\r\n\r\nconst ProjectPage: FC<ProjectPagePropsType> = ({ targetProject }) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <h2 className={s.header}>{ `${targetProject.core} \"${targetProject.name}\"` }</h2>\r\n            { targetProject.desc && <div className={s.desc}>{targetProject.desc}</div> }\r\n            <ProjectTasks projectId={targetProject.id}/>\r\n            <AddTaskForm projectId={targetProject.id} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectPage","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router'\r\nimport { compose } from 'redux'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../Redux/reduxStore'\r\nimport s from './projectPage.module.css'\r\nimport ProjectPage from './ProjectPage'\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst ProjectPageContainer: FC< MapStatePropsType & RouteComponentProps> = ({ projects, location }) => {\r\n\r\n    const projectLink = location.pathname.match(/.+/)\r\n    const project = projects.filter(project => {\r\n        if(projectLink){\r\n            return project.link === projectLink[0].substr(1)\r\n        }else return false\r\n    })\r\n    \r\n    if(!project.length){\r\n        return <h2 className={s.noPage}>Ошибка! Страница не найдена!</h2>\r\n    }\r\n\r\n    const targetProject = project[0]\r\n\r\n    return <ProjectPage targetProject={targetProject} />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps)\r\n)(ProjectPageContainer)\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport projectsReducer from './projectsReducer'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport tasksReducer from './tasksReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    projectsReducer,\r\n    tasksReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype ProreptiesType<T> = T extends { [key: string]: infer U} ? U : never\r\nexport type ActionTypes<T extends {[key: string] : (...args: any) => any}> = ReturnType<ProreptiesType<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst sageMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sageMiddleware)))\r\n\r\n\r\nexport default store","import { FC, useEffect } from 'react'\nimport { Provider } from 'react-redux'\nimport { HashRouter, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom'\nimport './App.css'\nimport AddNewProjectPage from './Components/AddNewProjectPage/AddNewProjectPage'\nimport AllProjPageContainer from './Components/AllProjPage/AllProjPageContainer'\nimport HeaderContainer from './Components/Header/HeaderContainer'\nimport MainPage from './Components/MainPage/MainPage'\nimport ProjectPageContainer from './Components/ProjectPage/ProjectPageContainer'\nimport store from './Redux/reduxStore'\n\nconst App: FC<RouteComponentProps> = ({ location }) => {\n  \n  let links = store.getState().projectsReducer.projects && store.getState().projectsReducer.projects.map((project: any) => '/' + project.link)\n\n  useEffect(() => {\n    links = store.getState().projectsReducer.projects && store.getState().projectsReducer.projects.map((project: any) => '/' + project.link)\n  }, [location.pathname])\n\n  return (\n    <div>\n      <HeaderContainer/>\n      <Switch>\n        {/* @ts-ignore */}\n        <Route path={links} component={ProjectPageContainer} />\n        <Route path='/all-projects' component={AllProjPageContainer} />\n        <Route path='/add-new-project' component={AddNewProjectPage} />\n        <Route path='/' exact component={MainPage} />\n      </Switch>\n    </div>\n  )\n}\n\nconst AppWithRouter = withRouter(App)\n\nconst RouterApp = () => {\n  return (\n    <HashRouter>\n      <Provider store={store}>\n        <AppWithRouter />\n      </Provider>\n    </HashRouter>\n  )\n}\n\nexport default RouterApp;\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// @ts-ignore\nreportWebVitals()\n"],"sourceRoot":""}