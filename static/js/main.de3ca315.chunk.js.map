{"version":3,"sources":["Components/common/AddNewTaskForm/addNewTaskForm.module.css","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/taskSubitem.module.css","Components/ProjectPage/ProjectTasks/TaskItem/taskItem.module.css","Components/AddNewProjectPage/AddNewProjForm/addNewProjForm.module.css","Components/AllProjPage/AllProjFilter/allProjFilter.module.css","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/subTaskItem.module.css","Components/Header/Burger/burger.module.css","Components/ProjectPage/projectPage.module.css","Components/AllProjPage/allProjPage.module.css","Components/MainPage/Cards/Card/ProjectList/projectList.module.css","Components/AllProjPage/AllProjTable/allProjTable.module.css","Components/Header/Menu/Projects/projects.module.css","Components/MainPage/Cards/Card/card.module.css","Components/Header/Home/home.module.css","Components/Header/Menu/menu.module.css","Components/Header/Menu/Projects/ProjectItem/projectItem.module.css","Components/ProjectPage/AddTaskForm/addTaskForm.module.css","Components/Header/header.module.css","Components/MainPage/MainPageHeader/mainPageHeader.module.css","Components/MainPage/Cards/cards.module.css","Components/ProjectPage/ProjectTasks/projectTasks.module.css","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.module.css","Components/AddNewProjectPage/addNewProjectPage.module.css","Components/MainPage/mainPage.module.css","reportWebVitals.ts","Components/AddNewProjectPage/AddNewProjHeader/AddNewProjHeader.tsx","heplers/constructLinkFromProjectName.ts","heplers/isUniqueProjectName.ts","Redux/projectsReducer.ts","Components/AddNewProjectPage/AddNewProjForm/AddNewProjForm.tsx","Components/AddNewProjectPage/AddNewProjectPage.tsx","Components/AllProjPage/AllProjFilter/AllProjFilter.tsx","heplers/getProcentCompletedProj.ts","heplers/getSubTasksFromTasks.ts","heplers/changeCompletedTaskStatus.ts","heplers/removeSubtaskNum.ts","heplers/removeTaskAndAllSubtasks.ts","Redux/tasksReducer.ts","Components/AllProjPage/AllProjTable/AllProjItem/AllProjItem.tsx","Components/AllProjPage/AllProjTable/AllProjTable.tsx","Components/AllProjPage/AllProjPage.tsx","Components/AllProjPage/AllProjPageContainer.tsx","Components/Header/Burger/Burger.tsx","Components/Header/Home/Home.tsx","Components/Header/Menu/Projects/ProjectItem/ProjectItem.tsx","Components/Header/Menu/Projects/Projects.tsx","Components/Header/Menu/Projects/ProjectsContainer.tsx","Components/Header/Menu/Menu.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/MainPage/MainPageHeader/MainPageHeader.tsx","Components/MainPage/Cards/Card/Card.tsx","heplers/last10Items.ts","Components/MainPage/Cards/Card/ProjectList/ProjectList.tsx","assets/icons/plus-for-card.svg","Components/MainPage/Cards/Cards.tsx","Components/MainPage/MainPage.tsx","Components/common/AddNewTaskForm/AddNewTaskForm.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/SubTaskItem/SubTaskItem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/TaskSubitem.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskSubitem/TaskSubitemContainer.tsx","Components/ProjectPage/ProjectTasks/TaskItem/TaskItemContainer.tsx","Components/ProjectPage/ProjectTasks/ProjectTasks.tsx","Components/ProjectPage/AddTaskForm/AddTaskForm.tsx","Components/ProjectPage/ProjectPage.tsx","Components/ProjectPage/ProjectPageContainer.tsx","App.tsx","LocalStorage/LocalStorage.ts","Redux/reduxStore.ts","AppContainer.tsx","AppRouter.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddNewProjHeader","className","s","header","constructLinkFromProjectName","name","arr","split","forEach","el","toLowerCase","length","join","isUniqueProjectName","allProhects","projectName","isUnique","project","ADD_NEW_PROJECT","DELETE_PROJECT","CHANGE_FILTER_OPTION","SET_PROJECTS_FROM_LS","initialValue","projects","filterOption","projectsActions","addNewProject","core","desc","type","deleteProject","id","changeFilterOption","setProjectsFromLS","projectsReducer","state","action","newProj","Date","now","completed","link","filter","mapDispatchToProps","addNewProj","connect","withRouter","history","initialValues","title","validate","values","errors","onSubmit","setSubmitting","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","push","isSubmitting","touched","form","item","htmlFor","autoComplete","input","errInp","err","component","textarea","btn","disabled","AddNewProjectPage","container","AllProjFilter","onChange","e","target","value","optionItem","defaultChecked","optionLabel","getProcentCompletedProj","allTaskObj","projectId","completedProcent","taskLevelResult","taskCompletedPoin","taskNotCompletedPoint","tasksLength","tasks","oneCompletedTaskProcent","task","forProject","subtasksId","items","subtasks","subtask","indexOf","ids","procentForOneItem","subTasks","subTasksId","procent","taskLevel","subtaskLevelResult","subtaskCompletedProcent","subtaskNotCompletedPoint","subTask","subsubtasksId","subsubtasks","subsubtask","subTaskLevel","subsubtaskCompletedProcent","element","subSubTaksLevel","Math","ceil","getSubTasksFromTasks","tasksArr","subtaskArr","result","getAllSubtasksId","changeCompletedTaskStatus","map","removeSubtaskNum","subtaskId","subsubtaskId","removeTaskAndAllSubtasks","removeId","filteredTasks","targetSubtasks","allSubSubId","newSubSubTasks","newSubtasks","newTasks","DELETE_TASK","CHANGE_COMPLETED_STATUS","SET_COMPLETED_STATUS","ADD_NEW_TASK","CHANGE_TASK_ORDER","SET_TASKS_FROM_LS","tasksActions","deleteTask","level","changeCompletedStatus","setCompletedStatus","status","addNewTask","idTask","changeTaskOrder","order","setTasksFromLS","tasksReducer","tasksWithoutRemovedElements","subtasksOrders","text","max","subsubtasksOrders","orders","targetTasks","targetSubSubtasks","to","green","onClick","AllProjTable","targetProjects","projectToTable","table","AllProjPage","allProjects","noProj","linkArea","Burger","openMenu","setOpenMenu","burger","viewBox","svg","open","d","topBar","middleBar","bottomBar","transform","Home","home","img","activeLink","location","pathname","match","active","Projects","activeMode","projectsItems","setShowList","showList","list","useState","useEffect","Menu","menu","show","Header","wide","MainPageHeader","info","Card","children","addProject","card","body","showAllLink","last10Items","resultArr","i","reverse","allMode","projectList","projectItems","style","width","line","Cards","src","plus","alt","MainPage","AddNewTaskForm","addSubtask","changeCreateSubtasksMode","setShowSubtasks","document","querySelector","focus","errorMess","add","close","TaskItem","showSubtasks","subtasksGenerate","isCompleted","createSubtasksMode","dragStartHandler","dragEndHandler","dragOverHandler","dropHandler","onDragStart","onDragLeave","onDragEnd","onDragOver","onDrop","without","innerTrigger","textDecoration","options","done","noDone","addSubtaskbtn","delete","subForm","SubTaskItem","subInnerTrigger","subtaskItem","optionsBar","TaskSubitem","showTask","addSubtaskHandler","removeSubitem","toggleCompletedStatus","addSubtaskFromLevel1","setShowTask","completedSubtask","subitem","trigger","withoutArr","big","subtasksElems","every","dragStartOrder","setDragStartOrder","dragStartId","setDragStartId","sortTasks","subtasksFind","sort","opacity","classList","contains","remove","childsArr","querySelectorAll","child","preventDefault","findedTasks","noTasks","a","b","taskElem","openForm","setOpenForm","newTask","s2","togglerInner","toggler","ProjectPage","targetProject","compose","projectLink","substr","noPage","App","links","path","ProjectPageContainer","AllProjPageContainer","exact","newestOnTop","rtl","pauseOnFocusLoss","projectsLS","tasksLS","subtasksLS","subsubtasksLS","LocalStorage","set","data","stringifyData","JSON","stringify","localStorage","setItem","get","getItem","parse","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","getState","AppRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de3ca315.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewTaskForm_form__3g-zy\",\"err\":\"addNewTaskForm_err__9xUjU\",\"input\":\"addNewTaskForm_input__3EOqx\",\"errorMess\":\"addNewTaskForm_errorMess__5JaB2\",\"btn\":\"addNewTaskForm_btn__2Amg4\",\"add\":\"addNewTaskForm_add__VVqTS\",\"close\":\"addNewTaskForm_close__1gNIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subitem\":\"taskSubitem_subitem__SPimv\",\"innerTrigger\":\"taskSubitem_innerTrigger__3jl0q\",\"optionsBar\":\"taskSubitem_optionsBar__27j5g\",\"big\":\"taskSubitem_big__1JTR6\",\"trigger\":\"taskSubitem_trigger__3h9-7\",\"withoutArr\":\"taskSubitem_withoutArr__jAUTy\",\"show\":\"taskSubitem_show__2PkWH\",\"addSubtaskbtn\":\"taskSubitem_addSubtaskbtn__2PO6h\",\"delete\":\"taskSubitem_delete__3MtFg\",\"completed\":\"taskSubitem_completed__2rRVB\",\"done\":\"taskSubitem_done__2nETy\",\"noDone\":\"taskSubitem_noDone__39QYm\",\"body\":\"taskSubitem_body__1M__t\",\"subForm\":\"taskSubitem_subForm__NFS1h\",\"dragOver\":\"taskSubitem_dragOver__1gUGU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"target\":\"taskItem_target__1AnYX\",\"item\":\"taskItem_item__3B5xJ\",\"show\":\"taskItem_show__2VpZe\",\"without\":\"taskItem_without__XpkUU\",\"innerTrigger\":\"taskItem_innerTrigger__NwV3Q\",\"options\":\"taskItem_options__3qzKw\",\"delete\":\"taskItem_delete__1ytO-\",\"addSubtaskbtn\":\"taskItem_addSubtaskbtn__IgSBU\",\"body\":\"taskItem_body__3Y5U6\",\"completed\":\"taskItem_completed__2Cy07\",\"done\":\"taskItem_done__3G-gr\",\"noDone\":\"taskItem_noDone__1aShc\",\"subForm\":\"taskItem_subForm__3W7I-\",\"dragOver\":\"taskItem_dragOver__2O2xP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addNewProjForm_form__zOBkq\",\"item\":\"addNewProjForm_item__CyU94\",\"textarea\":\"addNewProjForm_textarea__2qe68\",\"btn\":\"addNewProjForm_btn__htI6U\",\"err\":\"addNewProjForm_err__CN_6t\",\"input\":\"addNewProjForm_input__2Curx\",\"errInp\":\"addNewProjForm_errInp__2dmyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"allProjFilter_item__gAojr\",\"input\":\"allProjFilter_input__3hXzr\",\"optionLabel\":\"allProjFilter_optionLabel__2Og5u\",\"optionItem\":\"allProjFilter_optionItem__1aVSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subInnerTrigger\":\"subTaskItem_subInnerTrigger__1GQXe\",\"subtaskItem\":\"subTaskItem_subtaskItem__2G3jS\",\"optionsBar\":\"subTaskItem_optionsBar__15CXx\",\"delete\":\"subTaskItem_delete__1x2ME\",\"completed\":\"subTaskItem_completed__3C2Pn\",\"done\":\"subTaskItem_done__2Re0k\",\"noDone\":\"subTaskItem_noDone__Hs2k4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"burger\":\"burger_burger__3_Cbw\",\"svg\":\"burger_svg__ZOHcE\",\"topBar\":\"burger_topBar__1O7Nu\",\"bottomBar\":\"burger_bottomBar__1gwea\",\"middleBar\":\"burger_middleBar__Ba4uD\",\"open\":\"burger_open__1fKmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noPage\":\"projectPage_noPage__3oCFx\",\"container\":\"projectPage_container__3fOCF\",\"header\":\"projectPage_header__WChPu\",\"desc\":\"projectPage_desc__1BgrZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"allProjPage_container__16620\",\"header\":\"allProjPage_header__1RMNA\",\"noProj\":\"allProjPage_noProj__2Jy1S\",\"linkArea\":\"allProjPage_linkArea__10A5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"projectList_list__dlHt0\",\"noProj\":\"projectList_noProj__3U_9K\",\"progress\":\"projectList_progress__2md5f\",\"line\":\"projectList_line__1Erji\",\"status\":\"projectList_status__1in_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"allProjTable_table__37KYm\",\"btn\":\"allProjTable_btn__2CUJi\",\"green\":\"allProjTable_green__24Ji-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"projects_container__1LHTC\",\"header\":\"projects_header__2Qpad\",\"list\":\"projects_list__3Q-dd\",\"active\":\"projects_active__44tND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__GR9R-\",\"header\":\"card_header__1DnW0\",\"body\":\"card_body__20zdI\",\"showAllLink\":\"card_showAllLink__27Bi0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2xhVZ\",\"link\":\"home_link__EM9jL\",\"img\":\"home_img__35Hwj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__1ltFB\",\"show\":\"menu_show__WKioA\",\"addNewProj\":\"menu_addNewProj__WXx5n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"projectItem_link__2VsY8\",\"active\":\"projectItem_active__3Mubc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addTaskForm_container__1ArrL\",\"togglerInner\":\"addTaskForm_togglerInner__1wM9O\",\"toggler\":\"addTaskForm_toggler__NsTft\",\"form\":\"addTaskForm_form__1anMV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1F3do\",\"wide\":\"header_wide__h_dWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"mainPageHeader_header__3e0m9\",\"info\":\"mainPageHeader_info__23hJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__yx2mv\",\"img\":\"cards_img__ADdFg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noTasks\":\"projectTasks_noTasks__1jjZQ\",\"container\":\"projectTasks_container__2OEzr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AddNewProjHeader_header__1H5JR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"addNewProjectPage_container__100hs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"mainPage_container__3sIO1\"};","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import s from './AddNewProjHeader.module.css'\r\n\r\n\r\nconst AddNewProjHeader = () => {\r\n    return (\r\n        <div className={s.header}>\r\n            <h2>Добавить новый проект</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjHeader","const constructLinkFromProjectName = (name: string) => {\r\n    let result = ''\r\n    const arr = name.split(' ')\r\n    arr.forEach(el => el.toLowerCase())\r\n    \r\n    if(arr.length > 1){\r\n        result = arr.join('-')\r\n    }else{\r\n        result = arr.join('')\r\n    }\r\n    return result\r\n}\r\n\r\nexport default constructLinkFromProjectName","import { ProjectType } from './../Redux/projectsReducer'\r\n\r\nconst isUniqueProjectName = (allProhects: Array<ProjectType>, projectName: string) => {\r\n    let isUnique = true\r\n    allProhects.forEach(project => {\r\n        if(project.name === projectName){\r\n            isUnique = false\r\n        }\r\n    })\r\n    return isUnique\r\n}\r\n\r\nexport default isUniqueProjectName","import constructLinkFromProjectName from \"../heplers/constructLinkFromProjectName\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nconst ADD_NEW_PROJECT = 'ADD_NEW_PROJECT'\r\nconst DELETE_PROJECT = 'DELETE_PROJECT'\r\nconst CHANGE_FILTER_OPTION = 'CHANGE_FILTER_OPTION'\r\nconst SET_PROJECTS_FROM_LS = 'SET_PROJECTS_FROM_LS'\r\n\r\nexport type ProjectType = {\r\n    id: number\r\n    core: string\r\n    name: string\r\n    completed: boolean\r\n    desc: string\r\n    link: string\r\n}\r\n\r\nconst initialValue = {\r\n    projects: [] as Array<ProjectType>,\r\n    filterOption: 'all'\r\n}\r\n\r\nexport const projectsActions = {\r\n    addNewProject: (name: string, core: string, desc: string) => ({ type: ADD_NEW_PROJECT, name, core, desc }),\r\n    deleteProject: (id: number) => ({ type: DELETE_PROJECT, id }),\r\n    changeFilterOption : (filterOption: string) => ({ type: CHANGE_FILTER_OPTION, filterOption }),\r\n    setProjectsFromLS: (projects: Array<ProjectType>) => ({ type: SET_PROJECTS_FROM_LS, projects })\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof projectsActions>\r\n\r\nconst projectsReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case ADD_NEW_PROJECT: {\r\n            const newProj = {\r\n                id: Date.now(), \r\n                core: action.core, \r\n                name: action.name, \r\n                completed: false, \r\n                desc: action.desc, \r\n                link: `${constructLinkFromProjectName(action.core)}-${constructLinkFromProjectName(action.name)}`\r\n            }\r\n            return {\r\n                ...state,\r\n                projects: [...state.projects, newProj ]\r\n            }\r\n        }\r\n        case DELETE_PROJECT: {\r\n            return {\r\n                ...state,\r\n                projects: state.projects.filter(project => project.id !== action.id)\r\n            }\r\n        }\r\n        case CHANGE_FILTER_OPTION: {\r\n            return {\r\n                ...state,\r\n                filterOption: action.filterOption\r\n            }\r\n        }\r\n        case SET_PROJECTS_FROM_LS: {\r\n            return {\r\n                ...state,\r\n                projects: action.projects\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default projectsReducer","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { FC, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { RouteComponentProps, withRouter } from \"react-router\"\r\nimport { toast } from \"react-toastify\"\r\nimport constructLinkFromProjectName from \"../../../heplers/constructLinkFromProjectName\"\r\nimport isUniqueProjectName from \"../../../heplers/isUniqueProjectName\"\r\nimport { projectsActions, ProjectType } from \"../../../Redux/projectsReducer\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\nimport s from './addNewProjForm.module.css'\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewProj: (name: string, core: string, desc: string) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst AddNewProjForm: FC<MapDispatchPropsType & MapStatePropsType & RouteComponentProps> = ({ addNewProj, projects, history }) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{ name: '', title: '', desc: '' }}\r\n            validate={values => {\r\n                const errors: any = {};\r\n                if (!values.name) {\r\n                    errors.name = '* Это поле не может быть пустым';\r\n                }\r\n                if(!isUniqueProjectName(projects, values.name)){\r\n                    errors.name = '* Проект с таким именем уже существует';\r\n                }\r\n                if (!values.title) {\r\n                    errors.title = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                addNewProj(values.name, values.title, values.desc)\r\n                setSubmitting(false)\r\n                toast.dark(\"Проект успешно добавлен!\", {\r\n                    position: \"top-right\",\r\n                    autoClose: 1500,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                })\r\n                history.push(`${constructLinkFromProjectName(values.title)}-${constructLinkFromProjectName(values.name)}`)                \r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={s.form} >\r\n                <div  className={s.item}>\r\n                    <label htmlFor='title' >Заголовок / Суть:</label>\r\n                    <Field type=\"text\" name=\"title\" id='title' autoComplete='off' className={`${s.input} ${errors.title && touched.title ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"title\" component=\"div\"/>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <label htmlFor='name'>Название:</label>\r\n                    <Field type=\"text\" name=\"name\" id='name' autoComplete='off' className={`${s.input} ${errors.name && touched.name ? s.errInp : ''}`} />\r\n                    <ErrorMessage className={s.err} name=\"name\" component=\"div\"/>\r\n                </div>\r\n                <div  className={s.item}>\r\n                    <label htmlFor='desc'>Описание:</label>\r\n                    <Field name=\"desc\" autoComplete='off' id='desc' component='textarea' className={s.textarea}/>\r\n                </div>\r\n\r\n                <button className={s.btn} type=\"submit\" disabled={isSubmitting}>Сохранить и перейти в проект</button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\nconst mapDispatchToProps = {\r\n    addNewProj: projectsActions.addNewProject\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AddNewProjForm))","import AddNewProjHeader from \"./AddNewProjHeader/AddNewProjHeader\"\r\nimport s from './addNewProjectPage.module.css'\r\nimport AddNewProjForm from \"./AddNewProjForm/AddNewProjForm\"\r\n\r\n\r\nconst AddNewProjectPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <AddNewProjHeader/>\r\n            <AddNewProjForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewProjectPage","import { FC } from 'react';\r\nimport s from './allProjFilter.module.css'\r\n\r\ntype AllProjFilterPropsType = {\r\n    filterOption: string\r\n    changeFilterOption: (filterOption: string) => void\r\n}\r\n\r\nconst AllProjFilter: FC<AllProjFilterPropsType> = ({ filterOption, changeFilterOption }) => {\r\n\r\n    const onChange = (e: any) => {\r\n        changeFilterOption(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'all'} type=\"radio\" name=\"filter\" value=\"all\" id=\"all\" className={s.input}/>\r\n                    <label htmlFor=\"all\" className={s.optionLabel}><span>Все</span></label>\r\n                </div> \r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'completed'} type=\"radio\" name=\"filter\" value=\"completed\" id=\"completed\" className={s.input}/>\r\n                    <label htmlFor=\"completed\" className={s.optionLabel}><span>Завершенные</span></label>\r\n                </div>\r\n                <div className={s.optionItem}>\r\n                    <input onChange={onChange} defaultChecked={filterOption === 'notCompleted'} type=\"radio\" name=\"filter\" value=\"notCompleted\" id=\"notCompleted\" className={s.input}/>\r\n                    <label htmlFor=\"notCompleted\" className={s.optionLabel}><span>Незавершенные</span></label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllProjFilter","type allTaskObjType = {\r\n    tasks: Array<any>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\nconst taskLevel = (allTaskObj: allTaskObjType, projectId: number ) => {\r\n    let taskCompletedPoin = 0\r\n\r\n    const taskNotCompletedPoint: Array<any> = []\r\n    const tasksLength = allTaskObj.tasks.length\r\n    const oneCompletedTaskProcent = tasksLength ? (100 / tasksLength) : 0  \r\n\r\n    allTaskObj.tasks\r\n        .filter(task => task.forProject === projectId)\r\n        .forEach(task => {\r\n            if(task.completed){\r\n                taskCompletedPoin += 1\r\n            }else{\r\n                if(task.subtasksId.length){\r\n                    const items = allTaskObj.subtasks.filter(subtask => task.subtasksId.indexOf(subtask.id) !== -1 )\r\n                    const ids: Array<number> = []\r\n                    items.forEach(item => ids.push(item.id) )\r\n\r\n                    taskNotCompletedPoint.push({ procentForOneItem: oneCompletedTaskProcent / items.length, subTasks: [ ...items ], subTasksId: ids })\r\n                }\r\n            }\r\n        })\r\n\r\n    return  {\r\n        procent: oneCompletedTaskProcent * taskCompletedPoin,\r\n        taskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subTaskLevel = (allTaskObj: allTaskObjType, taskNotCompletedPoint: Array<any>) => {\r\n    let subtaskCompletedProcent = 0\r\n    const subtaskNotCompletedPoint: Array<any> = []\r\n\r\n    taskNotCompletedPoint.forEach(subtask => {\r\n        subtask.subTasks.forEach((subTask: any) => {\r\n            if(subTask.completed){\r\n                subtaskCompletedProcent += subtask.procentForOneItem\r\n            }else{\r\n                if(subTask.subsubtasksId.length){\r\n                    const items = allTaskObj.subsubtasks.filter(subsubtask => subtask.subTasksId.indexOf(subsubtask.id) !== -1 )\r\n                    subtaskNotCompletedPoint.push({ procentForOneItem: subtask.procentForOneItem / items.length, subTasks: [ ...items ] })\r\n                }\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subtaskCompletedProcent,\r\n        subtaskNotCompletedPoint\r\n    }\r\n}\r\n\r\nconst subSubTaksLevel = (subtaskNotCompletedPoint: Array<any>) => {\r\n    let subsubtaskCompletedProcent = 0\r\n\r\n    subtaskNotCompletedPoint.forEach(subsubtask => {\r\n        subsubtask.subTasks.forEach((element: any) => {\r\n            if(element.completed){\r\n                subsubtaskCompletedProcent = subsubtaskCompletedProcent + subsubtask.procentForOneItem\r\n            }\r\n        });\r\n    })\r\n    return {\r\n        procent: subsubtaskCompletedProcent\r\n    }\r\n}\r\n\r\nconst getProcentCompletedProj = (allTaskObj:allTaskObjType, projectId: number ) => {\r\n    let completedProcent: number = 0\r\n\r\n    const taskLevelResult = taskLevel(allTaskObj, projectId)\r\n    completedProcent = completedProcent + taskLevelResult.procent\r\n\r\n    const subtaskLevelResult = subTaskLevel(allTaskObj, taskLevelResult.taskNotCompletedPoint)\r\n    completedProcent = completedProcent + subtaskLevelResult.procent\r\n\r\n    const subSubtaskLevelResult = subSubTaksLevel(subtaskLevelResult.subtaskNotCompletedPoint)\r\n    completedProcent = completedProcent + subSubtaskLevelResult.procent\r\n\r\n    return Math.ceil(completedProcent) > 100 ? 100 : Math.ceil(completedProcent)\r\n}\r\n\r\nexport default getProcentCompletedProj","const getAllSubtasksId = (tasksArr: Array<any>) => {\r\n    const result: Array<number> = []\r\n    tasksArr.forEach(task => {\r\n        if(task.subtasksId && task.subtasksId.length){\r\n            result.push(...task.subtasksId)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.length){\r\n            result.push(...task.subsubtasksId)\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nconst getSubTasksFromTasks = (tasksArr: Array<any>, subtaskArr: Array<any>) => {\r\n    const subtasksId = getAllSubtasksId(tasksArr)\r\n    const targetSubtasks = subtaskArr.filter(subtask => subtasksId.indexOf(subtask.id) !== -1)\r\n    return targetSubtasks\r\n}\r\n\r\nexport default getSubTasksFromTasks","const changeCompletedTaskStatus = (tasks: any, id: number) => {\r\n    return [ ...tasks.map((task: any) => {\r\n        if(task.id === id){\r\n            task.completed = !task.completed\r\n        }\r\n        return task\r\n    }) ]\r\n}\r\n\r\n\r\nexport default changeCompletedTaskStatus","const removeSubtaskNum = (tasks: any, id: number) => {\r\n    return tasks.map((task: any) => {\r\n        if(task.subtasksId && task.subtasksId.indexOf(id) !== -1){\r\n            task.subtasksId = task.subtasksId.filter((subtaskId: any) => subtaskId !== id)\r\n        }\r\n        if(task.subsubtasksId && task.subsubtasksId.indexOf(id) !== -1){\r\n            task.subsubtasksId = task.subsubtasksId.filter((subsubtaskId: any) => subsubtaskId !== id)\r\n        }\r\n        return task\r\n    })\r\n}\r\n\r\nexport default removeSubtaskNum","const removeTaskAndAllSubtasks = (tasks: Array<any>, removeId: number, subtasks: any, subsubtasks: any = null) => {\r\n    const filteredTasks = tasks.filter(task => task.id === removeId) || subtasks.filter((task: any) => task.id === removeId)\r\n    const subtasksId = filteredTasks[0].subtasksId || filteredTasks[0].subsubtasksId\r\n    const targetSubtasks = (subtasksId && subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) !== -1)) || [] \r\n    \r\n    const allSubSubId: Array<number> = []\r\n    if(targetSubtasks.length){\r\n        targetSubtasks.forEach((subtask: any) => {\r\n            if(subtask.subsubtasksId && subtask.subsubtasksId.length){\r\n                allSubSubId.push( ...subtask.subsubtasksId )\r\n            }\r\n        });\r\n    }\r\n\r\n    const newSubSubTasks = allSubSubId.length ? subsubtasks.filter((subsubtask: any) => allSubSubId.indexOf(subsubtask.id) === -1) : subsubtasks\r\n    const newSubtasks = subtasksId && subtasksId.length ? subtasks.filter((subtask: any) => subtasksId.indexOf(subtask.id) === -1) : subtasks\r\n    const newTasks = tasks.filter(task => task.id !== removeId)\r\n\r\n    return {\r\n        newTasks,\r\n        newSubtasks,\r\n        newSubSubTasks\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default removeTaskAndAllSubtasks","import changeCompletedTaskStatus from \"../heplers/changeCompletedTaskStatus\"\r\nimport removeSubtaskNum from \"../heplers/removeSubtaskNum\"\r\nimport removeTaskAndAllSubtasks from \"../heplers/removeTaskAndAllSubtasks\"\r\nimport { ActionTypes } from \"./reduxStore\"\r\n\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst CHANGE_COMPLETED_STATUS = 'CHANGE_COMPLETED_STATUS'\r\nconst SET_COMPLETED_STATUS = 'SET_COMPLETED_STATUS'\r\nconst ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nconst CHANGE_TASK_ORDER = 'CHANGE_TASK_ORDER'\r\nconst SET_TASKS_FROM_LS = 'SET_TASKS_FROM_LS'\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    forProject?: number\r\n    text: string\r\n    order: number\r\n    completed: boolean\r\n    subtasksId: any\r\n}\r\n\r\nconst initialValue = {\r\n    tasks: [] as Array<TaskType>,\r\n    subtasks: [] as Array<any>,\r\n    subsubtasks: []  as Array<any>,\r\n}\r\n\r\nexport const tasksActions = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null = null) => ({ type: DELETE_TASK, id, level, subtasksId}),\r\n    changeCompletedStatus: (id: number, level: number) => ({ type: CHANGE_COMPLETED_STATUS, id, level }),\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => ({ type: SET_COMPLETED_STATUS, id, status, level }),\r\n    addNewTask: (task: string, level: number, idTask: number | null, projectId?: number) => ({ type: ADD_NEW_TASK, task, level, idTask, projectId }),\r\n    changeTaskOrder: (id: number, order: number, level: number) => ({ type: CHANGE_TASK_ORDER, id, order, level}),\r\n    setTasksFromLS: ( tasks: Array<any>, level: number ) => ({ type: SET_TASKS_FROM_LS, tasks, level })\r\n}\r\n\r\ntype InitialValueType = typeof initialValue\r\ntype ActionType = ActionTypes<typeof tasksActions>\r\n\r\nconst tasksReducer = (state = initialValue, action: any): InitialValueType =>{\r\n    switch(action.type){\r\n        case DELETE_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.tasks, action.id, state.subtasks, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: tasksWithoutRemovedElements.newTasks,\r\n                        subtasks: tasksWithoutRemovedElements.newSubtasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubSubTasks\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const tasksWithoutRemovedElements = removeTaskAndAllSubtasks(state.subtasks, action.id, state.subsubtasks)\r\n                    return {\r\n                        ...state,\r\n                        tasks: removeSubtaskNum(state.tasks, action.id),\r\n                        subtasks: tasksWithoutRemovedElements.newTasks,\r\n                        subsubtasks: tasksWithoutRemovedElements.newSubtasks\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: removeSubtaskNum(state.subtasks, action.id),\r\n                        subsubtasks: state.subsubtasks.filter(subsubtask => subsubtask.id !== action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: changeCompletedTaskStatus(state.tasks, action.id)\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: changeCompletedTaskStatus(state.subtasks, action.id)\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: changeCompletedTaskStatus(state.subsubtasks, action.id)\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case SET_COMPLETED_STATUS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.id){\r\n                                task.completed = action.status\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.id){\r\n                                subtask.completed = action.status\r\n                            }\r\n                            return subtask\r\n                        })\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case ADD_NEW_TASK: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    const subtasksOrders = state.subtasks.map(subtask => subtask.order)\r\n\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.idTask){\r\n                                task.subtasksId.push(id)\r\n                            }\r\n                            return task\r\n                        }),\r\n                        subtasks: [ ...state.subtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            order: Math.max(...subtasksOrders) + 1,\r\n                            subsubtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                case 1: {\r\n                    const subsubtasksOrders = state.subsubtasks.map(subsubtask => subsubtask.order)\r\n\r\n                    const id = Date.now()\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.idTask){\r\n                                subtask.subsubtasksId.push(id)\r\n                            }\r\n                            return subtask\r\n                        }),\r\n                        subsubtasks: [ ...state.subsubtasks, {\r\n                            id,\r\n                            text: action.task,\r\n                            order: Math.max(...subsubtasksOrders) + 1,\r\n                            completed: false\r\n                        }]\r\n                    }\r\n                }\r\n                case -1: {\r\n                    const orders = state.tasks\r\n                        .filter(task => task.forProject === action.projectId)\r\n                        .map(task => task.order)\r\n                    return {\r\n                        ...state,\r\n                        tasks: [...state.tasks, {\r\n                            id: Date.now(),\r\n                            forProject: action.projectId,\r\n                            text: action.task,\r\n                            completed: false,\r\n                            order: Math.max(...orders) + 1,\r\n                            subtasksId: []\r\n                        }]\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case CHANGE_TASK_ORDER: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: state.tasks.map(task => {\r\n                            if(task.id === action.id){\r\n                                task.order = action.order\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: state.subtasks.map(subtask => {\r\n                            if(subtask.id === action.id){\r\n                                subtask.order = action.order\r\n                            }\r\n                            return subtask\r\n                        })\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: state.subsubtasks.map(subsubtask => {\r\n                            if(subsubtask.id === action.id){\r\n                                subsubtask.order = action.order\r\n                            }\r\n                            return subsubtask\r\n                        })\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case SET_TASKS_FROM_LS: {\r\n            switch(action.level){\r\n                case 0: {\r\n                    return {\r\n                        ...state,\r\n                        tasks: action.tasks\r\n                    }\r\n                }\r\n                case 1: {\r\n                    return {\r\n                        ...state,\r\n                        subtasks: action.tasks\r\n                    }\r\n                }\r\n                case 2: {\r\n                    return {\r\n                        ...state,\r\n                        subsubtasks: action.tasks\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer","import { FC } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { toast } from \"react-toastify\"\r\nimport getProcentCompletedProj from \"../../../../heplers/getProcentCompletedProj\"\r\nimport getSubTasksFromTasks from \"../../../../heplers/getSubTasksFromTasks\"\r\nimport { AppStateType } from \"../../../../Redux/reduxStore\"\r\nimport { tasksActions } from '../../../../Redux/tasksReducer'\r\nimport s from '../allProjTable.module.css'\r\n\r\n\r\n\r\ntype AllProjItemPropsType = {\r\n    core: string\r\n    name: string\r\n    desc: string\r\n    id: number\r\n    completed: boolean\r\n    link: string\r\n    deleteProject: (id: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    tasks: Array<any>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n}\r\n\r\nconst AllProjItem: FC<AllProjItemPropsType & MapStatePropsType & MapDispatchPropsType> = ({ core, name, desc, completed, link, id, tasks, subtasks, subsubtasks, deleteProject, deleteTask }) => {\r\n\r\n    const targetTasks = tasks.filter(task => task.forProject === id)\r\n    const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n    const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n    \r\n    const procent = getProcentCompletedProj({\r\n        tasks: targetTasks,\r\n        subtasks: targetSubtasks,\r\n        subsubtasks: targetSubSubtasks\r\n    }, id)\r\n\r\n    const deleteItem = () => {\r\n        deleteProject(id)\r\n        targetTasks.forEach(task => {\r\n            deleteTask(task.id, 0, task.subtasksId)\r\n        })\r\n        toast.dark(\"Проект успешно удален!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{core}</td>\r\n            <td><NavLink to={`/${link}`}>{name}</NavLink></td>\r\n            <td>{desc || '-'}</td>\r\n            <td>{ completed ? '100%' : procent + '%'}</td>\r\n            <td>{ completed ? <span className={s.green}>&#10004;</span> : <span>&#10008;</span>}</td>\r\n            <td>\r\n                <button onClick={deleteItem} className={s.btn}>&#9746;</button>    \r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    tasks: state.tasksReducer.tasks,\r\n    subtasks: state.tasksReducer.subtasks,\r\n    subsubtasks: state.tasksReducer.subsubtasks\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    deleteTask: tasksActions.deleteTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjItem)","import { FC } from \"react\"\r\nimport AllProjItem from \"./AllProjItem/AllProjItem\"\r\nimport s from './allProjTable.module.css'\r\n\r\ntype AllProjTablePropsType = {\r\n    targetProjects: Array<any>\r\n    deleteProject: (id: number) => void\r\n}\r\n\r\nconst AllProjTable: FC<AllProjTablePropsType> = ({ targetProjects, deleteProject }) => {\r\n\r\n    const projectToTable = targetProjects\r\n        .map(project => <AllProjItem \r\n            key={project.id} \r\n            core={project.core}\r\n            name={project.name} \r\n            desc={project.desc}\r\n            completed={project.completed}\r\n            id={project.id}\r\n            link={project.link}\r\n            deleteProject={deleteProject}\r\n        />)\r\n\r\n    return (\r\n        <table className={s.table}>\r\n            <thead>\r\n                <tr>\r\n                    <td>Суть</td>\r\n                    <td>Название</td>\r\n                    <td>Описание</td>\r\n                    <td>Прогресс</td>\r\n                    <td>Завершено</td>\r\n                    <td>Удалить</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { projectToTable }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default AllProjTable","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\nimport AllProjFilter from './AllProjFilter/AllProjFilter'\r\nimport s from './allProjPage.module.css'\r\nimport AllProjTable from './AllProjTable/AllProjTable'\r\n\r\ntype AllProjPagePropsType = {\r\n    filterOption: string\r\n    deleteProject: (id: number) => void\r\n    changeFilterOption: (filterOption: string) => void\r\n    targetProjects: Array<ProjectType>\r\n    allProjects: Array<ProjectType>\r\n}\r\n\r\nconst AllProjPage: FC<AllProjPagePropsType> = ({ targetProjects, allProjects, filterOption, deleteProject, changeFilterOption }) => {\r\n\r\n    const noProj = !allProjects.length\r\n        ? <p className={s.noProj}>Проектов пока нет. <NavLink to='/add-new-project'>Добавьте первый.</NavLink></p> \r\n        : <p className={s.noProj}>Проектов по даному фильтру нет. Попробуйте другой.</p>\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.header}>\r\n                <h2>Все проекты</h2>\r\n            </div>\r\n            <AllProjFilter filterOption={filterOption} changeFilterOption={changeFilterOption}/>\r\n            { targetProjects.length ? (\r\n                <>\r\n                    <AllProjTable targetProjects={targetProjects} deleteProject={deleteProject}/>\r\n                    <div className={s.linkArea}>\r\n                        <NavLink to='/add-new-project'>Добавить новый проект</NavLink>\r\n                    </div>\r\n                </>\r\n            ) : noProj }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AllProjPage","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { projectsActions, ProjectType } from '../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../Redux/reduxStore'\r\nimport AllProjPage from './AllProjPage'\r\n\r\ntype AllProjPageContainerPropsType = {\r\n\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n    filterOption: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteProject: (id: number) => void\r\n    changeFilterOption: (filterOption: string) => void\r\n}\r\n\r\nconst AllProjPageContainer: FC<AllProjPageContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({ projects, filterOption, deleteProject, changeFilterOption }) => {\r\n\r\n    const targetProjects = projects.filter(project => {\r\n        if(filterOption === 'all'){\r\n            return project\r\n        }else if(filterOption === 'completed'){\r\n            return project.completed\r\n        }else{\r\n            return !project.completed\r\n        }\r\n    })\r\n\r\n    return <AllProjPage \r\n        targetProjects={targetProjects}\r\n        allProjects={projects}\r\n        filterOption={filterOption}\r\n        deleteProject={deleteProject}\r\n        changeFilterOption={changeFilterOption}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects,\r\n    filterOption: state.projectsReducer.filterOption\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    deleteProject: projectsActions.deleteProject,\r\n    changeFilterOption: projectsActions.changeFilterOption\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjPageContainer)\r\n","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './burger.module.css'\r\n\r\ntype BurgerPropsType = {\r\n    openMenu: boolean,\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Burger: FC<BurgerPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={s.burger}>\r\n            <svg viewBox=\"0 0 800 600\" className={`${s.svg} ${openMenu ? s.open : ''}`} onClick={() => setOpenMenu(!openMenu)}>\r\n                <path d=\"M300,220 C300,220 520,220 540,220 C740,220 640,540 520,420 C440,340 300,200 300,200\" className={s.topBar} />\r\n                <path d=\"M300,320 L540,320\" className={s.middleBar} />\r\n                <path d=\"M300,210 C300,210 520,210 540,210 C740,210 640,530 520,410 C440,330 300,190 300,190\" className={s.bottomBar} transform=\"translate(480, 320) scale(1, -1) translate(-480, -318)\" />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Burger","import { NavLink } from 'react-router-dom'\r\nimport s from './home.module.css'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className={s.home}>\r\n            <NavLink className={s.link} to='/'>\r\n                <div className={s.img}></div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import { Dispatch, FC, SetStateAction } from \"react\"\r\nimport { NavLink, RouteComponentProps, withRouter } from \"react-router-dom\"\r\nimport s from './projectItem.module.css'\r\n\r\ntype ProjectItemPropsType = {\r\n    name: string\r\n    link: string\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst ProjectItem: FC<ProjectItemPropsType & RouteComponentProps> = ({ name, link, setOpenMenu, location }) => {\r\n\r\n    const activeLink = location.pathname.match(link)\r\n\r\n    return (\r\n        <li>\r\n            <NavLink \r\n                onClick={() => setOpenMenu(false)}\r\n                className={(activeLink && activeLink[0]) === link ? `${s.link} ${s.active}` : `${s.link}`} \r\n                to={link}\r\n            >{name}</NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default withRouter(ProjectItem)","import { Dispatch, FC, SetStateAction } from \"react\"\r\nimport s from './projects.module.css'\r\n\r\ntype ProjectPropsType = {\r\n    activeMode: boolean\r\n    projectsItems: Array<JSX.Element>\r\n    setShowList: Dispatch<SetStateAction<boolean>>\r\n    showList: boolean\r\n}\r\n\r\nconst Projects: FC<ProjectPropsType> = ({ activeMode, projectsItems, setShowList, showList }) => {\r\n    return (\r\n        <div className={`${s.container} ${showList ? s.active : ''}`}>\r\n            <h2 className={s.header} onClick={() => setShowList(!showList)}> {activeMode ? 'Активные проекты' : 'Завершенные проекты'} <span>({projectsItems.length})</span> </h2>\r\n            <ul className={s.list}>\r\n                { projectsItems }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects","import React, { Dispatch, FC, SetStateAction, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { ProjectType } from '../../../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../../../Redux/reduxStore'\r\nimport ProjectItem from './ProjectItem/ProjectItem'\r\nimport Projects from './Projects'\r\n\r\ntype ProjectsContainerPropsType = {\r\n    activeMode: boolean\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst ProjectsContainer: FC<ProjectsContainerPropsType & MapStatePropsType> = ({ activeMode, projects, openMenu, setOpenMenu }) => {\r\n\r\n    const [ showList, setShowList ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(openMenu === false){\r\n            setShowList(false)\r\n        }\r\n    }, [openMenu])\r\n\r\n    const setShowListHandler = () => {\r\n        if(projectsItems.length){\r\n            setShowList(!showList)\r\n        }else{\r\n            setShowList(false)\r\n        }\r\n    }\r\n\r\n    const projectsItems = projects\r\n        .filter(project => project.completed === !activeMode )\r\n        .map(project => <ProjectItem key={project.id} setOpenMenu={setOpenMenu} name={project.name} link={project.link} />)\r\n\r\n    return <Projects \r\n        activeMode={activeMode} \r\n        projectsItems={projectsItems}\r\n        setShowList={setShowListHandler}\r\n        showList={showList}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectsContainer)\r\n","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport s from './menu.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport ProjectsContainer from './Projects/ProjectsContainer'\r\n\r\ntype MenuPropsType = {\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Menu: FC<MenuPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <div className={`${s.menu} ${openMenu ? s.show : ''}`}>\r\n            <ProjectsContainer openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={true}/>\r\n            <ProjectsContainer openMenu={openMenu} setOpenMenu={setOpenMenu} activeMode={false}/>\r\n            <NavLink onClick={() => setOpenMenu(false)} className={s.addNewProj} to='/add-new-project'>Добавить новый проект</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport Burger from './Burger/Burger'\r\nimport s from './header.module.css'\r\nimport Home from './Home/Home'\r\nimport Menu from './Menu/Menu'\r\n\r\ntype HeaderPropsType = {\r\n    openMenu: boolean\r\n    setOpenMenu: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Header: FC<HeaderPropsType> = ({ openMenu, setOpenMenu }) => {\r\n    return (\r\n        <header className={`${s.header} ${openMenu ? s.wide : ''}`}>    \r\n            <Burger openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Menu openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n            <Home/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { FC, useEffect, useState } from \"react\"\r\nimport { RouteComponentProps, withRouter } from \"react-router\"\r\nimport Header from \"./Header\"\r\n\r\nconst HeaderContainer: FC<RouteComponentProps> = ({ location }) => {\r\n    const [ openMenu, setOpenMenu ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setOpenMenu(false)\r\n    }, [location.pathname])\r\n\r\n    return <Header openMenu={openMenu} setOpenMenu={setOpenMenu}/>\r\n}\r\n\r\nexport default withRouter(HeaderContainer)","import s from './mainPageHeader.module.css'\r\n\r\nconst MainPageHeader = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={s.header}>Добро пожаловать в менеджер проектов!</h1>\r\n            <div className={s.info}>\r\n                <p>Данная программа поможет вам управлять своими проектами.</p> \r\n                <p>Вы сможете составлять пошаговую схему работы проекта, контролировать процесс разработки, ставить задачи, а также разбивать их на подзадачи.</p>\r\n                <p>Приятного пользования и хороших проектов!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MainPageHeader","import { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './card.module.css'\r\n\r\ntype CardPropsType = {\r\n    title: string\r\n    addProject: boolean\r\n}\r\n\r\nconst Card: FC<CardPropsType> = ({ children, title, addProject }) => {\r\n    return (\r\n        <div className={s.card}>\r\n            <h2 className={s.header}>{ title }</h2>\r\n            <div className={s.body}>\r\n                { children }\r\n            </div>\r\n            { !addProject && (\r\n                <div>\r\n                    <NavLink className={s.showAllLink} to='/all-projects'>Показать все...</NavLink>\r\n                </div> \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import { ProjectType } from \"../Redux/projectsReducer\"\r\n\r\nconst last10Items = (arr: Array<ProjectType>) => {\r\n    const resultArr: Array<ProjectType> = []\r\n    for(let i = 0; i <10; i++){\r\n        if(arr[i]){\r\n            resultArr.push(arr[i])\r\n        }else break\r\n    }\r\n    return resultArr.reverse()\r\n}\r\n\r\nexport default last10Items","import { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport getProcentCompletedProj from '../../../../../heplers/getProcentCompletedProj'\r\nimport getSubTasksFromTasks from '../../../../../heplers/getSubTasksFromTasks'\r\nimport last10Items from '../../../../../heplers/last10Items'\r\nimport { ProjectType } from '../../../../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../../../../Redux/reduxStore'\r\nimport { TaskType } from '../../../../../Redux/tasksReducer'\r\nimport s from './projectList.module.css'\r\n\r\ntype ProjectListPropsType = {\r\n    allMode: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n    tasks: Array<TaskType>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n}\r\n\r\nconst ProjectList: FC<ProjectListPropsType & MapStatePropsType> = ({ allMode, projects, tasks, subtasks, subsubtasks }) => {\r\n\r\n    const projectList = allMode ? projects : projects.filter(project => project.completed === false)\r\n    const last10 = last10Items(projectList)\r\n    const projectItems = last10.map(project => {\r\n\r\n        const targetTasks = tasks.filter(task => task.forProject === project.id)\r\n        const targetSubtasks = getSubTasksFromTasks(targetTasks, subtasks)\r\n        const targetSubSubtasks = getSubTasksFromTasks(targetSubtasks, subsubtasks)\r\n        \r\n        const procent = getProcentCompletedProj({\r\n            tasks: targetTasks,\r\n            subtasks: targetSubtasks,\r\n            subsubtasks: targetSubSubtasks\r\n        }, project.id)\r\n\r\n        return (\r\n            <li key={project.id}>\r\n                <NavLink to={project.link}>{project.name}</NavLink>\r\n                <div className={s.progress} title='Статус по задачам'>\r\n                    <div className={s.status}>{project.completed ? '100%' : procent + '%'}</div>\r\n                    <div style={project.completed ? {width: '100%'} : {width: procent + '%'}} className={s.line}></div>\r\n                </div>\r\n            </li>\r\n        )}\r\n    )\r\n\r\n    if(!projectItems.length){\r\n        return <p className={s.noProj}>{allMode ? 'Проектов пока нет!' : 'Активных проектов пока нет!'}</p>\r\n    }\r\n\r\n    return (\r\n        <ul className={s.list}>\r\n            {projectItems}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects,\r\n    tasks: state.tasksReducer.tasks,\r\n    subtasks: state.tasksReducer.subtasks,\r\n    subsubtasks: state.tasksReducer.subsubtasks\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectList)","export default __webpack_public_path__ + \"static/media/plus-for-card.5262e5f6.svg\";","import { NavLink } from \"react-router-dom\"\r\nimport Card from \"./Card/Card\"\r\nimport ProjectList from \"./Card/ProjectList/ProjectList\"\r\nimport s from './cards.module.css'\r\nimport plus from '../../../assets/icons/plus-for-card.svg'\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <Card title='Добавить новый проект' addProject={true}>\r\n                <NavLink to='/add-new-project'>\r\n                    <img className={s.img} src={plus} alt='add'/>\r\n                </NavLink>\r\n            </Card>\r\n            <Card title='Последние активные проекты' addProject={false}>\r\n                <ProjectList allMode={false} />\r\n            </Card>\r\n            <Card title='Последние проекты' addProject={false}>\r\n                <ProjectList allMode={true} />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import MainPageHeader from \"./MainPageHeader/MainPageHeader\"\r\nimport s from './mainPage.module.css'\r\nimport Cards from \"./Cards/Cards\"\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <MainPageHeader />\r\n            <Cards />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { Dispatch, FC, SetStateAction, useEffect } from \"react\"\r\nimport s from './addNewTaskForm.module.css'\r\n\r\n\r\ntype AddNewTaskFormPropType = {\r\n    addSubtask: (task: string) => void\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    setShowSubtasks?: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst AddNewTaskForm: FC<AddNewTaskFormPropType> = ({ addSubtask, changeCreateSubtasksMode, setShowSubtasks }) => {\r\n\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ task: '' }}\r\n            validate={values => {\r\n                const errors: any = {};\r\n                if (!values.task) {\r\n                    errors.task = '* Это поле не может быть пустым';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                if(setShowSubtasks){\r\n                    setShowSubtasks(true)\r\n                }\r\n                addSubtask(values.task)\r\n                setSubmitting(false)\r\n                changeCreateSubtasksMode(false)\r\n            }}\r\n        >\r\n        {({ isSubmitting, errors, touched }) => (\r\n            <Form className={`${s.form} ${touched.task && errors.task ? s.err : ''}`}>\r\n                <Field type=\"text\" name=\"task\" autoComplete='off' className={s.input}/>\r\n                <ErrorMessage name=\"task\" component=\"div\" className={s.errorMess} />\r\n                <button className={`${s.btn} ${s.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                <button className={`${s.btn} ${s.close}`} onClick={() => changeCreateSubtasksMode(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewTaskForm","import { Dispatch, FC, SetStateAction } from 'react'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport AddNewTaskForm from '../../../common/AddNewTaskForm/AddNewTaskForm'\r\nimport s from './taskItem.module.css'\r\n\r\ntype TaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    subsubtasksId?: Array<number> \r\n    showSubtasks: boolean\r\n    setShowSubtasks: Dispatch<SetStateAction<boolean>>\r\n    subtasksGenerate: Array<JSX.Element> | any\r\n    isCompleted: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void\r\n    createSubtasksMode: boolean\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    changeTaskOrder: (id: number, order: number, level: number) => void\r\n    dragStartHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragEndHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dragOverHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n    dropHandler: (e: React.DragEvent<HTMLDivElement>) => void\r\n}\r\n\r\nconst TaskItem: FC<TaskItemPropsType> = ({ id, text, completed, subsubtasksId, setShowSubtasks, showSubtasks, subtasksGenerate, isCompleted, deleteTask, changeCompletedStatus, addNewTask, createSubtasksMode, changeCreateSubtasksMode, changeTaskOrder, dragStartHandler, dragEndHandler, dragOverHandler, dropHandler }) => {\r\n\r\n    const addSubtaskFromLevel0 = (task: string) => {\r\n        addNewTask(task, 0, id)\r\n        toast.dark(\"Подзадача успешно добавлена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowSubtasks(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const removeTask = () => {\r\n        deleteTask(id, 0, subsubtasksId as null | Array<number>);\r\n        toast.dark(\"Задача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 0)\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onDragStart={(e) => dragStartHandler(e)}\r\n            onDragLeave={(e) => dragEndHandler(e)}\r\n            onDragEnd={(e) => dragEndHandler(e)}\r\n            onDragOver={(e) => dragOverHandler(e)}\r\n            onDrop={(e) => dropHandler(e)}\r\n            draggable='true' \r\n            className={`${s.item} ${subsubtasksId?.length && showSubtasks ? s.show : ''} ${!subsubtasksId?.length ? s.without : ''}`}\r\n        >\r\n            <div className={s.innerTrigger}>\r\n                <div className={s.target} onClick={() => setShowSubtasks(!showSubtasks)} style={isCompleted ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n                <div className={s.options}>\r\n                    {!subsubtasksId?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button title='Добавить подзадачу' onClick={addSubtaskHandler} className={s.addSubtaskbtn}></button>\r\n                    <button title='Удалить' onClick={removeTask} className={s.delete}></button>\r\n                </div>\r\n            </div>\r\n            <div className={s.body}>\r\n                {showSubtasks && subtasksGenerate.length ? subtasksGenerate : ''}\r\n                { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel0} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowSubtasks} /></div> }\r\n            </div>\r\n            {/* <div style={{position: 'fixed', top: 0, left: 0}}>\r\n                <ToastContainer/>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem","import { FC } from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport s from './subTaskItem.module.css'\r\n\r\ntype SubTaskItemPropsType = {\r\n    id: number\r\n    text: string\r\n    completed: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n}\r\n\r\nconst SubTaskItem: FC<SubTaskItemPropsType> = ({id,  text, completed, deleteTask, changeCompletedStatus }) => {\r\n\r\n    const removeSubtaskItem = () => {\r\n        deleteTask(id, 2, null)\r\n        toast.dark(\"Подподзадача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 2)\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div \r\n            draggable='true' \r\n            className={s.subInnerTrigger}\r\n        >\r\n            <div className={s.subtaskItem} style={completed ? {textDecoration: 'line-through'} : {}}>- {text}</div>\r\n            <div className={s.optionsBar}>\r\n                <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button>\r\n                <button title='Удалить' onClick={removeSubtaskItem} className={s.delete}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskItem","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport s from './taskSubitem.module.css'\r\nimport AddNewTaskForm from \"../../../../common/AddNewTaskForm/AddNewTaskForm\"\r\n\r\ntype TaskSubitemPropsType = {\r\n    text: string\r\n    showTask: boolean\r\n    isCompleted: boolean\r\n    subtasksGenerate: any\r\n    completed: boolean\r\n    addSubtaskHandler: () => void\r\n    removeSubitem: () => void\r\n    toggleCompletedStatus: () => void\r\n    addSubtaskFromLevel1: (task: string) => void\r\n    changeCreateSubtasksMode: Dispatch<SetStateAction<boolean>>\r\n    setShowTask: Dispatch<SetStateAction<boolean>>\r\n    createSubtasksMode: boolean\r\n}\r\n\r\nconst TaskSubitem: FC<TaskSubitemPropsType> = ({ text, showTask, isCompleted, completed, subtasksGenerate, addSubtaskHandler, removeSubitem, toggleCompletedStatus, addSubtaskFromLevel1, changeCreateSubtasksMode, setShowTask, createSubtasksMode }) => {\r\n\r\n    const completedSubtask = !subtasksGenerate?.length ? completed : isCompleted\r\n\r\n    return (\r\n        <div className={`${s.subitem} ${showTask ? s.show : ''}`}> \r\n            <div className={s.innerTrigger}>\r\n                <div className={`${s.trigger} ${!subtasksGenerate?.length ? s.withoutArr : ''}`} onClick={() => setShowTask(!showTask)} style={completedSubtask ? {textDecoration: 'line-through'} : {}} >- {text}</div>\r\n                <div className={`${s.optionsBar} ${!subtasksGenerate?.length ? s.big : ''}`}>\r\n                    {!subtasksGenerate?.length ? <button title={completed ? 'Отметить как невыполненное' : 'Отметить как выполеннное'} onClick={toggleCompletedStatus} className={`${s.completed} ${completed ? s.done : s.noDone}`}></button> : ''}\r\n                    <button onClick={addSubtaskHandler} title='Добавить подзадачу' className={s.addSubtaskbtn}></button>\r\n                    <button onClick={removeSubitem} title='Удалить' className={s.delete}></button>\r\n                </div>\r\n            </div> \r\n            <div className={s.body}>{showTask ? subtasksGenerate : ''}</div>\r\n            { createSubtasksMode && <div className={s.subForm}><AddNewTaskForm addSubtask={addSubtaskFromLevel1} changeCreateSubtasksMode={changeCreateSubtasksMode} setShowSubtasks={setShowTask} /></div> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskSubitem","import { FC, useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { toast } from \"react-toastify\"\r\nimport { AppStateType } from \"../../../../../Redux/reduxStore\"\r\nimport { tasksActions } from \"../../../../../Redux/tasksReducer\"\r\nimport SubTaskItem from \"./SubTaskItem/SubTaskItem\"\r\nimport TaskSubitem from \"./TaskSubitem\"\r\n\r\ntype TaskSubitemContainerPropsType = {\r\n    id: number\r\n    text: string\r\n    subsubtasksId: Array<number>\r\n    order: number\r\n    completed: boolean\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    subsubtasks: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void \r\n}\r\n\r\nconst TaskSubitemContainer: FC<TaskSubitemContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({ id, text, subsubtasksId, completed, subsubtasks, deleteTask, changeCompletedStatus, setCompletedStatus, addNewTask }) => {\r\n    const [showTask, setShowTask] = useState(false)\r\n\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const addSubtaskFromLevel1 = (task: string) => {\r\n        addNewTask(task, 1, id)\r\n        toast.dark(\"Подподзадача успешно добавлена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const addSubtaskHandler = () => {\r\n        setShowTask(true)\r\n        changeCreateSubtasksMode(true)\r\n    }\r\n\r\n    const toggleCompletedStatus = () => {\r\n        changeCompletedStatus(id, 1)\r\n        toast.dark(completed ? 'Невыполнено!' : 'Выполнено!', {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    const subtasksElems = subsubtasksId.map((subtaskId: any) => {\r\n        for(let i = 0; i <= subsubtasks.length; i++){\r\n            if(subsubtasks[i] && subsubtasks[i].id === subtaskId){\r\n                return subsubtasks[i]\r\n            }\r\n        }\r\n    })\r\n\r\n    const subtasksGenerate = subtasksElems.map((subsubtask: any) => subsubtask && <SubTaskItem key={subsubtask.id} id={subsubtask.id} completed={subsubtask.completed} text={subsubtask.text} deleteTask={deleteTask} changeCompletedStatus={changeCompletedStatus} /> )\r\n\r\n    const isCompleted = subtasksElems.every(subsubtasksId => subsubtasksId && subsubtasksId.completed)\r\n\r\n    const removeSubitem = () => {\r\n        deleteTask(id, 1, subsubtasksId)\r\n        toast.dark(\"Подзадача успешно удалена!\", {\r\n            position: \"top-right\",\r\n            autoClose: 1500,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return <TaskSubitem \r\n        text={text} \r\n        completed={completed}\r\n        isCompleted={isCompleted} \r\n        showTask={showTask}\r\n        subtasksGenerate={subtasksGenerate}\r\n        addSubtaskHandler={addSubtaskHandler}\r\n        removeSubitem={removeSubitem}\r\n        addSubtaskFromLevel1={addSubtaskFromLevel1}\r\n        changeCreateSubtasksMode={changeCreateSubtasksMode}\r\n        setShowTask={setShowTask}\r\n        createSubtasksMode={createSubtasksMode}\r\n        toggleCompletedStatus={toggleCompletedStatus}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    subsubtasks: state.tasksReducer.subsubtasks,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    setCompletedStatus: tasksActions.setCompletedStatus,\r\n    addNewTask: tasksActions.addNewTask,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSubitemContainer)","import { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../Redux/reduxStore\"\r\nimport { tasksActions } from \"../../../../Redux/tasksReducer\"\r\nimport TaskItem from \"./TaskItem\"\r\nimport TaskSubitemContainer from \"./TaskSubitem/TaskSubitemContainer\"\r\n\r\ntype TaskItemContainerPropsType = {\r\n    text: string\r\n    subtasksId?: Array<number>\r\n    completed: boolean\r\n    id: number\r\n    order: number\r\n    dragStartOrder: number\r\n    setDragStartOrder: Dispatch<SetStateAction<number>>\r\n    dragStartId: number\r\n    setDragStartId: Dispatch<SetStateAction<number>>\r\n    sortTasks: (a: any, b: any) => number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    subtasks: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTask: (id: number, level: number, subtasksId: Array<number> | null) => void\r\n    changeCompletedStatus: (id: number, level: number) => void\r\n    setCompletedStatus: (id: number, status: boolean, level: number) => void\r\n    addNewTask: (task: string, level: number, idTask: number | null) => void\r\n    changeTaskOrder: (id: number, order: number, level: number) => void\r\n}\r\n\r\n\r\nconst TaskItemContainer: FC<TaskItemContainerPropsType & MapStatePropsType & MapDispatchPropsType> = ({id, text, order, subtasksId, completed, subtasks, deleteTask, changeCompletedStatus, setCompletedStatus, addNewTask, changeTaskOrder , dragStartOrder, setDragStartOrder, dragStartId, setDragStartId, sortTasks}) => {\r\n\r\n    const [showSubtasks, setShowSubtasks] = useState(false)\r\n\r\n    const [createSubtasksMode, changeCreateSubtasksMode] = useState(false)\r\n\r\n    const subtasksFind = subtasksId?.length ? \r\n        subtasksId.map(subtaskId => {\r\n            for(let i = 0; i <= subtasks.length; i++){\r\n                if(subtasks[i] && subtasks[i].id === subtaskId){\r\n                    return subtasks[i]\r\n                }\r\n            }\r\n        })\r\n        : []\r\n\r\n    const subtasksGenerate = subtasksFind\r\n        .sort(sortTasks)\r\n        .map(subtask => {\r\n        if(subtask && subtask.subsubtasksId){\r\n            return <TaskSubitemContainer \r\n                key={subtask.id} \r\n                id={subtask.id} \r\n                order={subtask.order} \r\n                text={subtask.text} \r\n                completed={subtask.completed}\r\n                subsubtasksId={subtask.subsubtasksId} \r\n                deleteTask={deleteTask} \r\n                changeCompletedStatus={changeCompletedStatus}\r\n            />\r\n        }\r\n    })\r\n\r\n    const isCompleted = subtasksId?.length ? subtasksFind?.every(subtask => subtask && subtask.completed) : completed\r\n\r\n    useEffect(() => {\r\n            setCompletedStatus(id, isCompleted, 0)\r\n    }, [isCompleted])\r\n\r\n    // ============ drag and drop ===============\r\n\r\n    const dragStartHandler = (e: any) => {\r\n        setDragStartId(id)\r\n        setDragStartOrder(order)\r\n        e.target.style.opacity = '0.5'\r\n    }\r\n\r\n    const dragEndHandler = (e: any) => {\r\n        e.target.style.opacity = '1'\r\n        if(e.target.classList.contains('taskItem_dragOver__2O2xP')){\r\n            e.target.classList.remove('taskItem_dragOver__2O2xP')\r\n        }else{\r\n            const childsArr = document.querySelectorAll('.taskItem_dragOver__2O2xP')\r\n            if(childsArr.length){\r\n                childsArr.forEach(child => child.classList.remove('taskItem_dragOver__2O2xP'))\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragOverHandler = (e: any) => {\r\n        e.preventDefault()\r\n        if(e.target.classList.contains('taskItem_target__1AnYX')){\r\n            e.target.classList.add('taskItem_dragOver__2O2xP')\r\n        }\r\n        \r\n    }\r\n\r\n    const dropHandler = (e: any) => {\r\n        e.preventDefault()\r\n        changeTaskOrder(dragStartId, order, 0)\r\n        changeTaskOrder(id, dragStartOrder, 0)\r\n        \r\n    }\r\n\r\n    return <TaskItem\r\n        id={id}\r\n        text={text} \r\n        completed={completed} \r\n        subsubtasksId={subtasksId} \r\n        showSubtasks={showSubtasks} \r\n        setShowSubtasks={setShowSubtasks}\r\n        isCompleted={isCompleted}\r\n        subtasksGenerate={subtasksGenerate}\r\n        deleteTask={deleteTask}\r\n        changeCompletedStatus={changeCompletedStatus}\r\n        addNewTask={addNewTask}\r\n        createSubtasksMode={createSubtasksMode}\r\n        changeCreateSubtasksMode={changeCreateSubtasksMode}\r\n        changeTaskOrder={changeTaskOrder}\r\n        dragStartHandler={dragStartHandler}\r\n        dragEndHandler={dragEndHandler}\r\n        dragOverHandler={dragOverHandler}\r\n        dropHandler={dropHandler}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    subtasks: state.tasksReducer.subtasks\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    deleteTask: tasksActions.deleteTask,\r\n    changeCompletedStatus: tasksActions.changeCompletedStatus,\r\n    setCompletedStatus: tasksActions.setCompletedStatus,\r\n    addNewTask: tasksActions.addNewTask,\r\n    changeTaskOrder: tasksActions.changeTaskOrder,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItemContainer)","import { FC, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\nimport { TaskType } from \"../../../Redux/tasksReducer\"\r\nimport s from './projectTasks.module.css'\r\nimport TaskItemContainer from \"./TaskItem/TaskItemContainer\"\r\n\r\n\r\ntype ProjectTasksPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nconst ProjectTasks: FC<ProjectTasksPropsType & MapStatePropsType> = ({ projectId, tasks }) => {\r\n\r\n    const findedTasks = tasks.filter(task => task.forProject === projectId)\r\n\r\n    const [dragStartOrder, setDragStartOrder] = useState(0)\r\n    const [dragStartId, setDragStartId] = useState(0)\r\n\r\n    if(!findedTasks.length){\r\n        return <p className={s.noTasks}>Задач на проект пока нет!</p>\r\n    }\r\n\r\n    const sortTasks = (a: any, b: any) => a.order > b.order ? 1 : -1\r\n\r\n    const taskElem = findedTasks\r\n        .sort(sortTasks)\r\n        .map(task => <TaskItemContainer \r\n            key={task.id} \r\n            id={task.id} \r\n            order={task.order} \r\n            text={task.text} \r\n            subtasksId={task.subtasksId} \r\n            completed={task.completed} \r\n            dragStartOrder={dragStartOrder}\r\n            setDragStartOrder={setDragStartOrder}\r\n            dragStartId={dragStartId}\r\n            setDragStartId={setDragStartId}\r\n            sortTasks={sortTasks}\r\n        />)\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            {taskElem}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    tasks: state.tasksReducer.tasks\r\n})\r\n\r\nexport default connect(mapStateToProps)(ProjectTasks)","import { ErrorMessage, Field, Form, Formik } from \"formik\"\r\nimport { FC, useEffect, useState } from \"react\"\r\nimport s from './addTaskForm.module.css'\r\nimport s2 from '../../common/AddNewTaskForm/addNewTaskForm.module.css'\r\nimport { tasksActions } from \"../../../Redux/tasksReducer\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../../Redux/reduxStore\"\r\nimport { toast } from \"react-toastify\"\r\n\r\ntype MapDispatchPropsType = {   \r\n    addNewTask: (task: string, level: number, idTask: number | null, projectId?: number) => void\r\n}\r\n\r\ntype AddTaskFormPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst AddTaskForm: FC<AddTaskFormPropsType & MapDispatchPropsType> = ({ addNewTask, projectId }) => {\r\n\r\n    const [openForm, setOpenForm] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const input = document.querySelector('.addNewTaskForm_input__3EOqx')\r\n        if(input){\r\n            //@ts-ignore\r\n            input.focus()\r\n        }\r\n    }, [openForm])\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            \r\n            { openForm ? (\r\n                <Formik\r\n                    initialValues={{ newTask: '' }}\r\n                    validate={values => {\r\n                        const errors: any = {};\r\n                        if (!values.newTask) {\r\n                            errors.newTask = '* Это поле не может быть пустым';\r\n                        }\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        addNewTask(values.newTask, -1, null, projectId)\r\n                        toast.dark(\"Задача успешно добавлена!\", {\r\n                            position: \"top-right\",\r\n                            autoClose: 1500,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        })\r\n                        setOpenForm(false)\r\n                        setSubmitting(false)\r\n                    }}\r\n                >\r\n                {({ isSubmitting, errors, touched }) => (\r\n                    <Form className={`${s2.form} ${touched.newTask && errors.newTask ? s2.err : ''}`}>\r\n                        <Field type=\"text\" name=\"newTask\" autoComplete='off' className={s2.input}/>\r\n                        <ErrorMessage name=\"newTask\" component=\"div\" className={s2.errorMess} />\r\n                        <button className={`${s2.btn} ${s2.add}`} type=\"submit\" disabled={isSubmitting}></button>\r\n                        <button className={`${s2.btn} ${s2.close}`} onClick={() => setOpenForm(false)} type=\"reset\" disabled={isSubmitting}></button>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n            ) : (\r\n                <div className={s.togglerInner}>\r\n                    - <button className={s.toggler} onClick={() => setOpenForm(true)} ></button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({})\r\n\r\nconst mapDispatchToProps = {\r\n    addNewTask: tasksActions.addNewTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm)","import s from './projectPage.module.css'\r\nimport ProjectTasks from \"./ProjectTasks/ProjectTasks\"\r\nimport AddTaskForm from './AddTaskForm/AddTaskForm'\r\nimport { FC } from 'react'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\n\r\ntype ProjectPagePropsType = {\r\n    targetProject: ProjectType\r\n}\r\n\r\nconst ProjectPage: FC<ProjectPagePropsType> = ({ targetProject }) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <h2 className={s.header}>{ `${targetProject.core} \"${targetProject.name}\"` }</h2>\r\n            { targetProject.desc && <div className={s.desc}>{targetProject.desc}</div> }\r\n            <ProjectTasks projectId={targetProject.id}/>\r\n            <AddTaskForm projectId={targetProject.id} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectPage","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router'\r\nimport { compose } from 'redux'\r\nimport { ProjectType } from '../../Redux/projectsReducer'\r\nimport { AppStateType } from '../../Redux/reduxStore'\r\nimport s from './projectPage.module.css'\r\nimport ProjectPage from './ProjectPage'\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n}\r\n\r\nconst ProjectPageContainer: FC< MapStatePropsType & RouteComponentProps> = ({ projects, location }) => {\r\n\r\n    const projectLink = location.pathname.match(/.+/)\r\n    const project = projects.filter(project => {\r\n        if(projectLink){\r\n            return project.link === projectLink[0].substr(1)\r\n        }else return false\r\n    })\r\n    \r\n    if(!project.length){\r\n        return <h2 className={s.noPage}>Ошибка! Страница не найдена!</h2>\r\n    }\r\n\r\n    const targetProject = project[0]\r\n\r\n    return <ProjectPage targetProject={targetProject} />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps)\r\n)(ProjectPageContainer)\r\n","import { FC } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { ToastContainer } from 'react-toastify'\nimport './App.css'\nimport AddNewProjectPage from './Components/AddNewProjectPage/AddNewProjectPage'\nimport AllProjPageContainer from './Components/AllProjPage/AllProjPageContainer'\nimport HeaderContainer from './Components/Header/HeaderContainer'\nimport MainPage from './Components/MainPage/MainPage'\nimport ProjectPageContainer from './Components/ProjectPage/ProjectPageContainer'\nimport 'react-toastify/dist/ReactToastify.css';\n\ntype AppPropsType = {\n  links: Array<any>\n}\n\nconst App: FC<AppPropsType> = ({ links }) => {\n  return (\n    <div>\n      <HeaderContainer/>\n      <Switch>\n        {/* @ts-ignore */}\n        <Route path={links} component={ProjectPageContainer} />\n        <Route path='/all-projects' component={AllProjPageContainer} />\n        <Route path='/add-new-project' component={AddNewProjectPage} />\n        <Route path='/' exact component={MainPage} />\n      </Switch>\n      <ToastContainer position=\"top-right\"\n          autoClose={1500}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n    </div>\n  )\n}\n\nexport default App\n","export const projectsLS = 'projects'\r\nexport const tasksLS = 'tasks'\r\nexport const subtasksLS = 'subtasks'\r\nexport const subsubtasksLS = 'subsubtasks'\r\n\r\nconst LocalStorage = {\r\n    set(name: string, data: any){\r\n        const stringifyData = JSON.stringify(data)\r\n        localStorage.setItem(name, stringifyData)\r\n    },\r\n    get(name: string){\r\n        const data = localStorage.getItem(name)\r\n        if(data){\r\n            return JSON.parse(data)\r\n        }\r\n    }\r\n}\r\n\r\nexport default LocalStorage","import { createStore, combineReducers, compose } from 'redux'\r\nimport projectsReducer from './projectsReducer'\r\nimport tasksReducer from './tasksReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    projectsReducer,\r\n    tasksReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype ProreptiesType<T> = T extends { [key: string]: infer U} ? U : never\r\nexport type ActionTypes<T extends {[key: string] : (...args: any) => any}> = ReturnType<ProreptiesType<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers())\r\n\r\nexport default store","import React, { FC, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router'\r\nimport { compose } from 'redux'\r\nimport App from './App'\r\nimport LocalStorage, { projectsLS, subsubtasksLS, subtasksLS, tasksLS } from './LocalStorage/LocalStorage'\r\nimport { projectsActions, ProjectType } from './Redux/projectsReducer'\r\nimport store, { AppStateType } from './Redux/reduxStore'\r\nimport { tasksActions } from './Redux/tasksReducer'\r\n\r\ntype MapStatePropsType = {\r\n    projects: Array<ProjectType>\r\n    tasks: Array<any>\r\n    subtasks: Array<any>\r\n    subsubtasks: Array<any>\r\n  }\r\n  \r\n  type MapDispatchPropsType = {\r\n    setProjectsFromLS: (projects: Array<ProjectType>) => void\r\n    setTasksFromLS: (tasks: Array<any>, level: number) => void\r\n  }\r\n\r\nconst AppContainer: FC<MapStatePropsType & MapDispatchPropsType & RouteComponentProps> = ({ location, projects, setProjectsFromLS, tasks, subtasks, subsubtasks, setTasksFromLS }) => {\r\n\r\n    let links = store.getState().projectsReducer.projects && store.getState().projectsReducer.projects.map((project: any) => '/' + project.link)\r\n\r\n    useEffect(() => {\r\n      links = store.getState().projectsReducer.projects && store.getState().projectsReducer.projects.map((project: any) => '/' + project.link)\r\n    }, [location.pathname])\r\n  \r\n    useEffect(() => {\r\n      const projects = LocalStorage.get(projectsLS)\r\n      if(projects && projects.length){\r\n        setProjectsFromLS(projects)\r\n      }\r\n  \r\n      const tasks = LocalStorage.get(tasksLS)\r\n      if(tasks && tasks.length){\r\n        setTasksFromLS(tasks, 0)\r\n      }\r\n  \r\n      const subtasks = LocalStorage.get(subtasksLS)\r\n      if(subtasks && subtasks.length){\r\n        setTasksFromLS(subtasks, 1)\r\n      }\r\n  \r\n      const subsubtasks = LocalStorage.get(subsubtasksLS)\r\n      if(subsubtasks && subsubtasks.length){\r\n        setTasksFromLS(subsubtasks, 2)\r\n      }\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(projectsLS, projects)\r\n    }, [projects])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(tasksLS, tasks)\r\n    }, [tasks])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(subtasksLS, subtasks)\r\n    }, [subtasks])\r\n  \r\n    useEffect(() => {\r\n      LocalStorage.set(subsubtasksLS, subsubtasks)\r\n    }, [subsubtasks])\r\n\r\n    {/* @ts-ignore */}\r\n    return <App links={links} />\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    projects: state.projectsReducer.projects,\r\n    tasks: state.tasksReducer.tasks,\r\n    subtasks: state.tasksReducer.subtasks,\r\n    subsubtasks: state.tasksReducer.subsubtasks,\r\n})\r\n  \r\nconst mapDispatchToProps = {\r\n    setProjectsFromLS: projectsActions.setProjectsFromLS,\r\n    setTasksFromLS: tasksActions.setTasksFromLS\r\n}\r\n  \r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter\r\n)(AppContainer)\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport AppContainer from './AppContainer'\r\nimport store from './Redux/reduxStore'\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                {/* @ts-ignore */}\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppRouter from './AppRouter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// @ts-ignore\nreportWebVitals()\n"],"sourceRoot":""}